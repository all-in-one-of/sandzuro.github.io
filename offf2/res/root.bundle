{"fbeb9d76fafe4864b218ff4e5e7c3106.entity": {"name": "Fixed Cam", "license": "CC0", "tags": {}, "deleted": false, "created": "2015-10-10T02:45:36.816Z", "dataModelVersion": 2, "modified": "2015-10-10T02:45:36.816Z", "static": false, "components": {"camera": {"fov": 45, "lockedRatio": false, "far": 1000, "followEditorCam": false, "projectionMode": "Perspective", "near": 1, "aspect": 1, "size": 100}, "transform": {"rotation": [13.053897669089743, -27.532140789579145, -9.26846937351163], "scale": [1, 1, 1], "translation": [-7.403326034545898, 0.4821394979953766, 17.588838577270508]}}, "hidden": false, "id": "fbeb9d76fafe4864b218ff4e5e7c3106.entity"}, "cd150832f04d4b7fad271449b7b7cd82.script": {"body": "var setup = function(args, ctx, goo) {\n\t\n\tctx.dir = args.invert ? 1 : -1;\n\t\n\t// Entities onto which the camera is attached\n\tctx.cameraY = ctx.entity;\n\tctx.cameraX = ctx.entity.transformComponent.children[0].entity;\n\n\tif (!(ctx.cameraX && ctx.cameraY)) {\n\t\tconsole.error('Camera X and/or Y entities missing');\n\t\treturn;\n\t}\n\t\n\tctx.startXRotation = ctx.cameraX.getRotation()[0];\n\tctx.startYRotation = ctx.cameraY.getRotation()[1];\n\t\n\t// Bounds\n\tctx.rect = ctx.domElement.getBoundingClientRect();\n\tgoo.SystemBus.addListener('goo.viewportResize', function() {\n\t\tctx.rect = ctx.domElement.getBoundingClientRect();\n\t});\n\t\n\t// Rotation constants for mouse\n\tctx.smoothFactor = args.smoothFactor;\n\tctx.moveFactor = args.moveFactor/50000.0;\n\t\n\t// Values for nice gyro orientation speed\n\tctx.xOrientationMid = args.xOrientationMid;\n\tctx.xOrientationFactor = -args.orientationFactor/800.0;\n\tctx.yOrientationFactor = -args.orientationFactor/800.0;\n\t\n\t// Relative to center (mouse) or neutral angles (gyro)\n\tctx.relative = [0, 0];\n\tctx.relativeSmooth = [0, 0];\n\n\tctx.windowListeners = {\n\t\tmousemove: function(evt) {\n\t\t\tmouseMove(ctx, evt.clientX, evt.clientY);\n\t\t},\n\t\tdeviceorientation: function(evt) {\n\t\t\tif (evt.beta && evt.gamma) {\n\t\t\t\tdeviceOrientation(ctx, evt.beta, evt.gamma);\n\t\t\t}\n\t\t}\n\t};\n\tObject.keys(ctx.windowListeners).forEach(function(v) {\n\t\twindow.addEventListener(v, ctx.windowListeners[v]);\n\t});\n\t\n};\n\nvar mouseMove = function(ctx, x, y) {\n\tctx.relative[0] = (x - ctx.rect.width/2.0)*ctx.moveFactor;\n\tctx.relative[1] = (y - ctx.rect.height/2.0)*ctx.moveFactor;\n};\n\nvar deviceOrientation = function(ctx, x, y) {\n\tif (window.orientation === 0) {\n\t\t// upright\n\t\tctx.relative[0] = y*ctx.xOrientationFactor;\n\t\tctx.relative[1] = (x - ctx.xOrientationMid)*ctx.yOrientationFactor;\n\t} else if (window.orientation === 90) {\n\t\t// flip CCW\n\t\tctx.relative[0] = x*ctx.xOrientationFactor;\n\t\tctx.relative[1] = -(y + ctx.xOrientationMid)*ctx.yOrientationFactor;\n\t} else if (window.orientation === -90) {\n\t\t// flip CW\n\t\tctx.relative[0] = -x*ctx.xOrientationFactor;\n\t\tctx.relative[1] = (y - ctx.xOrientationMid)*ctx.yOrientationFactor;\n\t}\n};\n\nvar cleanup = function(args, ctx, goo) {\n\tObject.keys(ctx.windowListeners).forEach(function(v) {\n\t\twindow.removeEventListener(v, ctx.windowListeners[v]);\n\t});\n};\n\nvar smoothMove = function(ctx) {\n\tctx.relative.forEach(function(v, i) {\n\t\tctx.delta = Math.abs(ctx.relative[i] - ctx.relativeSmooth[i]);\n\t\tif (ctx.delta < 1*ctx.moveFactor) {\n\t\t\tctx.relativeSmooth[i] = ctx.relative[i];\n\t\t} else {\n\t\t\tctx.speed = ctx.delta/ctx.smoothFactor;\n\t\t\tctx.relativeSmooth[i] = (ctx.relative[i] > ctx.relativeSmooth[i]) ?\n\t\t\t\tctx.relativeSmooth[i]+ctx.speed : ctx.relativeSmooth[i]-ctx.speed;\n\t\t}\n\t});\n};\n\nvar updateRotation = function(ctx) {\n\tctx.cameraY.setRotation(0, ctx.startYRotation+ctx.dir*ctx.relativeSmooth[0], 0);\n\tctx.cameraX.setRotation(ctx.startXRotation+ctx.dir*ctx.relativeSmooth[1], 0, 0);\n};\n\nvar update = function(args, ctx, goo) {\n\tsmoothMove(ctx);\n\tupdateRotation(ctx);\n};\n\nvar parameters = [\n{\n\tkey: 'invert',\n\tname: 'Invert',\n\ttype: 'boolean',\n\tdefault: false\n},\n{\n\tkey: 'smoothFactor',\n\tname: 'Smoothing',\n\ttype: 'float',\n\tmin: 0,\n\tmax: 50,\n\tdefault: 10,\n\tcontrol: 'slider'\n\t\n},\n{\n\tkey: 'moveFactor',\n\tname: 'Mouse Force',\n\ttype: 'float',\n\tmin: 0,\n\tmax: 200,\n\tdefault: 50,\n\tcontrol: 'slider'\n},\n{\n\tkey: 'orientationFactor',\n\tname: 'Gyro Force',\n\ttype: 'float',\n\tmin: 0,\n\tmax: 200,\n\tdefault: 20,\n\tcontrol: 'slider'\n},\n{\n\tkey: 'xOrientationMid',\n\tname: 'Neutral X Orientation',\n\ttype: 'float',\n\tmin: -180,\n\tmax: 180,\n\tdefault: 45.0,\n\tcontrol: 'slider'\n}\n];", "name": "Mouse/Gyro Look-Around", "license": "CC0", "created": "2015-01-04T15:19:10.899864+00:00", "deleted": false, "modified": "2015-01-04T15:19:10.899890+00:00", "dataModelVersion": 2, "dependencies": {}, "id": "cd150832f04d4b7fad271449b7b7cd82.script"}, "40e769c1adf542959d219fd0a320cb16.machine": {"name": "Behavior", "license": "CC0", "created": "2015-10-10T02:06:44.879Z", "deleted": false, "dataModelVersion": 2, "initialState": "4880aa44f7f443f1b3bae6f01b1df75b.state", "states": {"214efc9b3bf8453a910884f713582775.state": {"actions": {"f86cdc9218484e14817a575fc2442310.action": {"name": "Key Pressed", "type": "Key Pressed", "options": {"transitions": {"keydown": "f2410045464d4e49aff2dac47bb0c610.transition"}, "key": "1"}, "sortValue": 0, "id": "f86cdc9218484e14817a575fc2442310.action"}, "5b004108af614971bd7d181bc9f8fe61.action": {"name": "Emit Message", "type": "Emit message", "options": {"transitions": {}, "channel": "glitchOff"}, "sortValue": 1, "id": "5b004108af614971bd7d181bc9f8fe61.action"}}, "transitions": {"f2410045464d4e49aff2dac47bb0c610.transition": {"name": "Key pressed", "targetState": "4880aa44f7f443f1b3bae6f01b1df75b.state", "sortValue": 0, "id": "f2410045464d4e49aff2dac47bb0c610.transition"}}, "id": "214efc9b3bf8453a910884f713582775.state", "sortValue": 0, "name": "State"}, "4880aa44f7f443f1b3bae6f01b1df75b.state": {"actions": {"4f88684a6c294715a9ee4cfc1042496b.action": {"name": "Emit Message", "type": "Emit message", "options": {"transitions": {}, "channel": "glitch"}, "sortValue": 0, "id": "4f88684a6c294715a9ee4cfc1042496b.action"}, "3f8dd54a1c9b4526ae753eeb20717b9d.action": {"name": "Key Pressed", "type": "Key Pressed", "options": {"transitions": {"keydown": "7c7195242254417c8c8eb35d9c8a1938.transition"}, "key": "1"}, "sortValue": 1, "id": "3f8dd54a1c9b4526ae753eeb20717b9d.action"}}, "transitions": {"7c7195242254417c8c8eb35d9c8a1938.transition": {"name": "Key pressed", "targetState": "214efc9b3bf8453a910884f713582775.state", "sortValue": 0, "id": "7c7195242254417c8c8eb35d9c8a1938.transition"}}, "id": "4880aa44f7f443f1b3bae6f01b1df75b.state", "sortValue": 1, "name": "emit"}}, "modified": "2015-10-10T02:06:44.879Z", "id": "40e769c1adf542959d219fd0a320cb16.machine"}, "c53b572a593e4d25b4c93b4f90bab5ea.script": {"body": "'use strict';\n\n/* global goo */\n\nvar setup = function (args, ctx) {\n\tvar meshData = ctx.entity.meshDataComponent.meshData;\n\tctx.indexModes = meshData.indexModes;\n\tctx.material = ctx.entity.meshRendererComponent.materials[0];\n\t\n\t\n\tmeshData.indexModes = ['Points'];\n\tvar newMaterial = new goo.Material({\n\t\tattributes: {\n\t\t\tvertexPosition: goo.MeshData.POSITION,\n\t\t\tvertexNormal: goo.MeshData.NORMAL\n\t\t},\n\t\tuniforms: {\n\t\t\tviewProjectionMatrix: goo.Shader.VIEW_PROJECTION_MATRIX,\n\t\t\tworldMatrix: goo.Shader.WORLD_MATRIX,\n\t\t\tdiffuseMap: goo.Shader.DIFFUSE_MAP,\n\t\t\tsize: args.size,\n\t\t\tu_time : function() {return goo.World.time;}\n\t\t},\n\t\tvshader: [\n\t\t\t'attribute vec3 vertexPosition;',\n\t\t\t\"attribute vec3 vertexNormal;\",\n\t\t\t\n\t\t\t'uniform mat4 viewProjectionMatrix;',\n\t\t\t'uniform mat4 worldMatrix;',\n\t\t\t'uniform float size;',\n\t\t\t\"uniform float u_time;\",\n\t\t\t\n\t\t\t\t\t 'varying float noise;',\n\t\t \n\t\t 'vec3 mod289(vec3 x)',\n'{',\n'  return x - floor(x * (1.0 / 289.0)) * 289.0;',\n'}',\n\n'vec4 mod289(vec4 x)',\n'{',\n'  return x - floor(x * (1.0 / 289.0)) * 289.0;',\n'}',\n\n'vec4 permute(vec4 x)',\n'{',\n'  return mod289(((x*34.0)+1.0)*x);',\n'}',\n\n'vec4 taylorInvSqrt(vec4 r)',\n'{',\n'  return 1.79284291400159 - 0.85373472095314 * r;',\n'}',\n\n'vec3 fade(vec3 t) {',\n'  return t*t*t*(t*(t*6.0-15.0)+10.0);',\n'}',\n\n'// Classic Perlin noise',\n'float cnoise(vec3 P)',\n'{',\n'  vec3 Pi0 = floor(P); // Integer part for indexing',\n'  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1',\n'  Pi0 = mod289(Pi0);',\n'  Pi1 = mod289(Pi1);',\n'  vec3 Pf0 = fract(P); // Fractional part for interpolation',\n'  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0',\n'  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);',\n'  vec4 iy = vec4(Pi0.yy, Pi1.yy);',\n'  vec4 iz0 = Pi0.zzzz;',\n'  vec4 iz1 = Pi1.zzzz;',\n\n'  vec4 ixy = permute(permute(ix) + iy);',\n'  vec4 ixy0 = permute(ixy + iz0);',\n'  vec4 ixy1 = permute(ixy + iz1);',\n\n'  vec4 gx0 = ixy0 * (1.0 / 7.0);',\n'  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;',\n'  gx0 = fract(gx0);',\n'  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);',\n'  vec4 sz0 = step(gz0, vec4(0.0));',\n'  gx0 -= sz0 * (step(0.0, gx0) - 0.5);',\n'  gy0 -= sz0 * (step(0.0, gy0) - 0.5);',\n\n'  vec4 gx1 = ixy1 * (1.0 / 7.0);',\n'  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;',\n'  gx1 = fract(gx1);',\n'  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);',\n'  vec4 sz1 = step(gz1, vec4(0.0));',\n'  gx1 -= sz1 * (step(0.0, gx1) - 0.5);',\n'  gy1 -= sz1 * (step(0.0, gy1) - 0.5);',\n\n'  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);',\n'  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);',\n'  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);',\n'  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);',\n'  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);',\n'  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);',\n'  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);',\n'  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);',\n\n'  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));',\n'  g000 *= norm0.x;',\n'  g010 *= norm0.y;',\n'  g100 *= norm0.z;',\n'  g110 *= norm0.w;',\n'  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));',\n'  g001 *= norm1.x;',\n'  g011 *= norm1.y;',\n'  g101 *= norm1.z;',\n'  g111 *= norm1.w;',\n\n'  float n000 = dot(g000, Pf0);',\n'  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));',\n'  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));',\n'  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));',\n'  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));',\n'  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));',\n'  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));',\n'  float n111 = dot(g111, Pf1);',\n\n'  vec3 fade_xyz = fade(Pf0);',\n'  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);',\n'  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);',\n'  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);',\n'  return 2.2 * n_xyz;',\n'}',\n\n'// Classic Perlin noise, periodic variant',\n'float pnoise(vec3 P, vec3 rep)',\n'{',\n'  vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period',\n'  vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period',\n'  Pi0 = mod289(Pi0);',\n'  Pi1 = mod289(Pi1);',\n'  vec3 Pf0 = fract(P); // Fractional part for interpolation',\n'  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0',\n'  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);',\n'  vec4 iy = vec4(Pi0.yy, Pi1.yy);',\n'  vec4 iz0 = Pi0.zzzz;',\n'  vec4 iz1 = Pi1.zzzz;',\n\n'  vec4 ixy = permute(permute(ix) + iy);',\n'  vec4 ixy0 = permute(ixy + iz0);',\n'  vec4 ixy1 = permute(ixy + iz1);',\n\n'  vec4 gx0 = ixy0 * (1.0 / 7.0);',\n'  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;',\n'  gx0 = fract(gx0);',\n'  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);',\n'  vec4 sz0 = step(gz0, vec4(0.0));',\n'  gx0 -= sz0 * (step(0.0, gx0) - 0.5);',\n'  gy0 -= sz0 * (step(0.0, gy0) - 0.5);',\n\n'  vec4 gx1 = ixy1 * (1.0 / 7.0);',\n'  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;',\n'  gx1 = fract(gx1);',\n'  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);',\n'  vec4 sz1 = step(gz1, vec4(0.0));',\n'  gx1 -= sz1 * (step(0.0, gx1) - 0.5);',\n'  gy1 -= sz1 * (step(0.0, gy1) - 0.5);',\n\n'  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);',\n'  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);',\n'  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);',\n'  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);',\n'  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);',\n'  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);',\n'  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);',\n'  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);',\n\n'  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));',\n'  g000 *= norm0.x;',\n'  g010 *= norm0.y;',\n'  g100 *= norm0.z;',\n'  g110 *= norm0.w;',\n'  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));',\n'  g001 *= norm1.x;',\n'  g011 *= norm1.y;',\n'  g101 *= norm1.z;',\n'  g111 *= norm1.w;',\n\n'  float n000 = dot(g000, Pf0);',\n'  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));',\n'  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));',\n'  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));',\n'  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));',\n'  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));',\n'  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));',\n'  float n111 = dot(g111, Pf1);',\n\n'  vec3 fade_xyz = fade(Pf0);',\n'  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);',\n'  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);',\n'  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);',\n'  return 2.2 * n_xyz;',\n'}',\n\n'float turbulence( vec3 p ) {',\n'  float w = 100.0;',\n'  float t = -.5;',\n'  for (float f = 1.0 ; f <= 10.0 ; f++ ){',\n'    float power = pow( 2.0, f );',\n'    t += abs( pnoise( vec3( power * p ), vec3( 10.0, 10.0, 10.0 ) ) / power );',\n'  }',\n'  return t;',\n'}',\n\t\t\t\n\t\t\t\n\t\t\t'void main(void) {',\n\t\t\t\t\"vec4 worldPos = worldMatrix * vec4(vertexPosition, 1.0);\",\n\t\t\t'noise = 10.0 *  -.10 * turbulence( .5 * vertexNormal + tan(u_time/5.0) );',\n\t\t  // get a 3d noise using the position, low frequency\n\t\t 'float b = 6.0 * pnoise( 0.05 * vertexPosition + vec3( 0.5 * tan(u_time/5.0) ), vec3( 100.0 ) );',\n          // compose both noises\n   \t\t ' float displacement = -noise*3.0 + b;',\n\t\t 'worldPos.xyz += vertexNormal*displacement*2.0;',\n\t\t\t\n             '    gl_Position = viewProjectionMatrix * worldPos;',\n\t\t\t\t'gl_PointSize = size / gl_Position.w;',\n\t\t\t'}'\n\t\t].join('\\n'),\n\t\tfshader: [\n\t\t\t'uniform sampler2D diffuseMap;',\n\t\t\t'void main(void)',\n\t\t\t'{',\n\t\t\t\t'gl_FragColor = texture2D(diffuseMap, gl_PointCoord);',\n\t\t\t'}'\n\t\t].join('\\n')\n\t});\n\tnewMaterial.setTexture(goo.Shader.DIFFUSE_MAP, args.sprite);\n\tnewMaterial.blendState.blending = 'TransparencyBlending';\n\tnewMaterial.depthState.write = false;\n\tnewMaterial.renderQueue = goo.RenderQueue.TRANSPARENT;\n\t\n\tctx.entity.meshRendererComponent.materials[0] = newMaterial;\n};\n\nvar cleanup = function (args, ctx) {\n\tvar meshData = ctx.entity.meshDataComponent.meshData;\n\tmeshData.indexModes = ctx.indexModes;\n\tctx.entity.meshRendererComponent.materials[0] = ctx.material;\n};\n\nvar update = function (args, ctx) {\n\n};\n\nvar parameters = [\n\t{ key: 'sprite', type:'texture' },\n\t{ key: 'size', type:'float', default: '200.0' }\n];", "name": "_PointifyScriptNoise2", "license": "CC0", "created": "2015-09-25T10:40:24.524Z", "deleted": false, "dataModelVersion": 2, "modified": "2015-09-25T10:40:24.524Z", "id": "c53b572a593e4d25b4c93b4f90bab5ea.script"}, "84ae6cd6ed7f4778988cb44ab5f9f107.entity": {"name": "Directional 0", "license": "CC0", "tags": {}, "deleted": false, "created": "2015-01-06T07:40:44.413129+00:00", "modified": "2015-02-20T20:20:29.006213+00:00", "dataModelVersion": 2, "static": false, "components": {"light": {"direction": [0, 0, 0], "shadowCaster": false, "color": [1, 1, 1, 1], "intensity": 0.8, "range": 60, "specularIntensity": 1, "penumbra": 5, "angle": 30, "type": "DirectionalLight", "shadowSettings": {"fov": 55, "darkness": 1, "far": 60, "near": 1, "resolution": [256, 256], "shadowType": "Basic", "size": 100}}, "transform": {"rotation": [-38, 21, -18], "scale": [1, 1, 1], "translation": [16, 20.5, 23.3]}}, "hidden": false, "id": "84ae6cd6ed7f4778988cb44ab5f9f107.entity"}, "9e7a738bc9a448dc8a5ec96685af8cd2.posteffects": {"name": "Post effects", "license": "CC0", "created": "2015-01-06T07:40:44.461323+00:00", "deleted": false, "modified": "2015-01-06T07:40:44.461362+00:00", "dataModelVersion": 2, "posteffects": {}, "id": "9e7a738bc9a448dc8a5ec96685af8cd2.posteffects"}, "48a092a767d14a6d988e0c05d247c30f.material": {"texturesMapping": {}, "flat": false, "cullState": {"frontFace": "CCW", "enabled": true, "cullFace": "Back"}, "uniforms": {"opacity": {"enabled": true, "value": 1}, "refractivity": {"enabled": true, "value": 0}, "materialAmbient": {"enabled": true, "value": [0.2, 0.2, 0.2, 1]}, "materialSpecular": {"enabled": true, "value": [0.2, 0.2, 0.2, 1]}, "fresnel": {"enabled": true, "value": 0}, "reflectivity": {"enabled": true, "value": 0}, "materialSpecularPower": {"enabled": true, "value": 20}, "materialDiffuse": {"enabled": true, "value": [0.8, 0.8, 0.8, 1]}, "vertexColorAmount": {"enabled": true, "value": 1}, "materialEmissive": {"enabled": true, "value": [0, 0, 0, 1]}, "discardThreshold": {"enabled": false, "value": 0.1}, "normalMultiplier": {"enabled": true, "value": 1}, "etaRatio": {"enabled": true, "value": -0.5}, "wrapSettings": {"enabled": true, "value": [0, 0]}}, "name": "defaultMat", "license": "PRIVATE", "created": "2015-09-29T14:55:03.114969+00:00", "deleted": false, "wireframe": false, "dataModelVersion": 2, "blendState": {"blendDst": "OneMinusSrcAlphaFactor", "blendSrc": "SrcAlphaFactor", "blendEquation": "AddEquation", "blending": "NoBlending"}, "modified": "2015-09-29T14:55:03.114969+00:00", "dualTransparency": false, "depthState": {"write": true, "enabled": true}, "shaderRef": "GOO_ENGINE_SHADERS/uber", "id": "48a092a767d14a6d988e0c05d247c30f.material", "renderQueue": -1}, "7053c6583bef4148ae0d3bbb44708997.entity": {"name": "Rot. Around X", "license": "CC0", "tags": {}, "deleted": false, "created": "2015-10-10T02:45:36.815Z", "dataModelVersion": 2, "modified": "2015-10-10T02:45:36.815Z", "static": false, "components": {"transform": {"rotation": [-19.44506, 0, 0], "scale": [1, 1, 1], "translation": [0, 0, 0], "children": {"fbeb9d76fafe4864b218ff4e5e7c3106.entity": {"entityRef": "fbeb9d76fafe4864b218ff4e5e7c3106.entity", "sortValue": 0}}}}, "hidden": false, "id": "7053c6583bef4148ae0d3bbb44708997.entity"}, "028ae283aca64c15867ad809667ca879.environment": {"sound": {"dopplerFactor": 0, "maxDistance": 100, "reverb": 0, "rolloffFactor": 0.4, "volume": 1}, "globalAmbient": [0, 0, 0, 0], "license": "CC0", "created": "2015-01-06T07:40:44.106363+00:00", "deleted": false, "dataModelVersion": 2, "modified": "2015-01-06T07:40:44.106404+00:00", "fog": {"color": [1, 1, 1], "far": 996, "near": 0, "enabled": false}, "backgroundColor": [0.9333333333333333, 0.9333333333333333, 0.9333333333333333, 1], "weather": {"snow": {"velocity": 10, "rate": 10, "enabled": false, "height": 25}}, "id": "028ae283aca64c15867ad809667ca879.environment", "name": "Default Environment"}, "9bdc7c35059f4dc1aebaf6294290db06.script": {"body": "'use strict';\n\n\n/* global goo */\n\nvar setup = function (args, ctx) {\n var meshData = ctx.entity.meshDataComponent.meshData;\n ctx.indexModes = meshData.indexModes;\n meshData.indexModes = ['Points'];\n var webCamTexture = new goo.TextureCreator().loadTextureWebCam().then(function (texture) {\n var material = ctx.entity.meshRendererComponent.materials[0];\t \n var originalTexture = material.getTexture(goo.Shader.DIFFUSE_MAP);\n\t \n//  material.setTexture('DIFFUSE_MAP', texture);\n\t \n\t var material = new goo.Material('MyMaterial', {\n             attributes: {\n                vertexPosition: goo.MeshData.POSITION,\n                vertexUV0: goo.MeshData.TEXCOORD0,\n             },\n             uniforms: {\n                viewProjectionMatrix: goo.Shader.VIEW_PROJECTION_MATRIX,\n                worldMatrix: goo.Shader.WORLD_MATRIX,\n                diffuseMap : goo.Shader.DIFFUSE_MAP,\n                diffuseMap2: 'DIFFUSE_MAP2',\n\t\t\t\tsize: args.size,\n                time : function() {return goo.World.time;}\n             },\n\t\t\tvshader: [\n            'attribute vec3 vertexPosition;',\n\t\t\t'attribute vec2 vertexUV0;',\n\t\t\t\"attribute vec3 vertexNormal;\",\n\t\t\t\t\n\t\t\t'varying vec2 texCoord0;',\n\t\t\t\t\n            'uniform mat4 viewProjectionMatrix;',\n            'uniform mat4 worldMatrix;',\n            'uniform float size;',\n\t\t\t\t\n\t\t\t'uniform sampler2D diffuseMap;',\n\n            'void main(void) {',\n\t\t\t\t'texCoord0 = vertexUV0;',\n\t\t\t\t'float scale = 20.0;',\n    \t\t\t'float bias = 0.0;',\n\t\t\t\t'float h = 0.0;',\n\t\t\t\t'h = scale * ((texture2D(diffuseMap, texCoord0).r) - bias);',\n   \t\t\t\t'clamp(h, 0.0, 1.0);',\n\t\t\t\t\n//\t\t\t\t'vec4 color = texture2D(diffuseMap, texCoord0);',\n\t\t\t\t\"vec4 worldPos = worldMatrix * vec4(vertexPosition, 1.0);\",\n\t\t\t\t'worldPos.xyz += vertexPosition*h ;',\n                'gl_Position = viewProjectionMatrix * worldPos;',\n\t\t\t\t'gl_PointSize = size / gl_Position.w;',\n            '}'\n        ].join('\\n'),\n             fshader : [\n                'uniform float time;',\n                'uniform sampler2D diffuseMap;',\n                'uniform sampler2D diffuseMap2;',\n                'varying vec2 texCoord0;',\n         \n                'void main() {',\n                 'vec2 p = texCoord0;',\n                 'p *= 5.0;',\n                 'vec4 color = vec4(1.0);',\n                  'color = texture2D(diffuseMap, texCoord0);',\n                  \n                  'vec4 color2 = vec4(1.0);',\n                  'color2 = texture2D(diffuseMap2, gl_PointCoord);',\n//                  'gl_FragColor = mix(color, color2, color2.a);',\n                 'gl_FragColor = color2;',\n                  \n                  \n                '}'].join('\\n')\n             \n         });\n\t \n\t     material.setTexture('DIFFUSE_MAP', texture);\n         material.setTexture(\"DIFFUSE_MAP2\", args.sprite);\n//\t \tmaterial.setTexture(goo.Shader.DIFFUSE_MAP, args.sprite);\n\t\tmaterial.blendState.blending = 'TransparencyBlending';\n//\t\tmaterial.depthState.write = false;\n\t\tmaterial.renderQueue = goo.RenderQueue.TRANSPARENT;\n\t \n//\t \t material.wireframe = true;\n         ctx.entity.meshRendererComponent.materials[0] = material;\n\t \t\n\t \n}, function () {\n    console.error('Error loading webcam texture.');\n});\n\t\n};\n\nvar cleanup = function (args, ctx) {\n\n};\n\nvar update = function (args, ctx) {\n\n};\n\nvar parameters = [\n   \t{ key: 'size', type:'float', default: '200.0' },\n      {key:'sprite', type:'texture', default:null},\n    ];", "name": "_webcam_texture 3", "license": "CC0", "created": "2015-09-29T13:18:13.236Z", "deleted": false, "dataModelVersion": 2, "modified": "2015-09-29T13:18:13.236Z", "id": "9bdc7c35059f4dc1aebaf6294290db06.script"}, "f4bd783767b3423c96d89e7f9e67c242.entity": {"name": "Default Camera", "license": "CC0", "tags": {}, "deleted": false, "created": "2015-10-10T02:06:44.878Z", "dataModelVersion": 2, "modified": "2015-10-10T02:06:44.878Z", "static": false, "components": {"camera": {"fov": 45, "lockedRatio": false, "far": 1000, "followEditorCam": false, "projectionMode": "Perspective", "near": 1, "aspect": 1, "size": 5}, "transform": {"rotation": [1.8794324180611437, -1.764527185158667, 0], "scale": [1, 1, 1], "translation": [20.951993942260742, -75.69693756103516, 20.353437423706055]}, "stateMachine": {"machines": {"40e769c1adf542959d219fd0a320cb16.machine": {"machineRef": "40e769c1adf542959d219fd0a320cb16.machine", "sortValue": 0}}}, "script": {"scripts": {"16f23272c044420281a51802d532e8ff.scriptinstance": {"options": {"glitch": true, "enabled": true, "shake": 1, "lines": 128, "antialias": false, "sIntensity": 0.2, "rbgshift": true, "amount": 1, "nIntensity": 0.2, "rgbamount": 1, "filmlines": 512, "magnitude2": 0.85, "offset": [0, 0, 0], "bleach": false, "film": false, "magnitude1": 0.95}, "scriptRef": "43dfa2461ce94a34b3056c2fec28573f.script", "sortValue": 1, "name": "Custom script"}}}}, "hidden": false, "id": "f4bd783767b3423c96d89e7f9e67c242.entity"}, "c8d24c057cb34c0b8027d3aebbe51cef.entity": {"name": "Directional 1", "license": "CC0", "tags": {}, "deleted": false, "created": "2015-01-06T07:40:44.153955+00:00", "modified": "2015-02-20T20:20:29.016229+00:00", "dataModelVersion": 2, "static": false, "components": {"light": {"direction": [0, 0, 0], "shadowCaster": false, "color": [1, 1, 1, 1], "intensity": 0.4, "range": 60, "specularIntensity": 1, "penumbra": 5, "angle": 30, "type": "DirectionalLight", "shadowSettings": {"fov": 55, "darkness": 1, "far": 60, "near": 1, "resolution": [256, 256], "shadowType": "Basic", "size": 100}}, "transform": {"rotation": [-31, 129, 0], "scale": [1, 1, 1], "translation": [15, 11.6, -12.2]}}, "hidden": false, "id": "c8d24c057cb34c0b8027d3aebbe51cef.entity"}, "9638730faefc4b5ca9e199c7426a4700.mesh": {"name": "", "license": "CC0", "created": "2015-10-09T15:17:19.580405+00:00", "boundingVolume": {"max": [0.499493629, 0.27768299, 0.5], "type": "BoundingBox", "min": [-0.499458522, -0.277683049, 0]}, "modified": "2015-10-09T15:17:19.580405+00:00", "dataModelVersion": 2, "deleted": false, "vertexCount": 1011, "indexModes": ["Triangles"], "indices": [0, 1281, "uint16"], "attributes": {"POSITION": {"dimensions": 3, "value": [2564, 3033, "float32"]}, "TEXCOORD0": {"dimensions": 2, "value": [14696, 2022, "float32"]}, "TANGENT": {"dimensions": 4, "value": [22784, 4044, "float32"]}, "NORMAL": {"dimensions": 3, "value": [38960, 3033, "float32"]}}, "binaryRef": "dd87c7687fb6e455a2641232796e9fb78be41bf9.bin", "type": "Mesh", "id": "9638730faefc4b5ca9e199c7426a4700.mesh", "indexLengths": [1281]}, "feacff5e61fc469a8ea10fd5f00866e7.texture": {"wrapS": "Repeat", "minFilter": "BilinearNoMipMaps", "name": "marker_2.png 3", "license": "CC0", "flipY": true, "deleted": false, "magFilter": "Bilinear", "created": "2015-10-09T21:07:51.591Z", "dataModelVersion": 2, "modified": "2015-10-09T21:07:51.591Z", "matchFileName": "marker_2.png", "repeat": [1, 1], "imageRef": "cc36f2c74e0fc82f972cba71d9bb4b907afc7360.png", "lodBias": 0, "offset": [0, 0], "id": "feacff5e61fc469a8ea10fd5f00866e7.texture", "generateMipmaps": false, "anisotropy": 1, "wrapT": "Repeat"}, "5d54657f5cc5494b9ba39a9acd105c81.entity": {"name": "default", "license": "CC0", "tags": {}, "deleted": false, "created": "2015-10-10T01:46:01.821Z", "dataModelVersion": 2, "modified": "2015-10-10T01:46:01.821Z", "static": false, "components": {"meshData": {"meshRef": "9638730faefc4b5ca9e199c7426a4700.mesh"}, "transform": {"rotation": [0, 0, 0], "scale": [1, 1, 1], "translation": [0, 0, 0]}, "meshRenderer": {"receiveShadows": true, "materials": {"a3dff8903c8e4440a2a8b2d1238e6c7e.material": {"materialRef": "a3dff8903c8e4440a2a8b2d1238e6c7e.material", "sortValue": 0}}, "reflectable": true, "cullMode": "Dynamic", "castShadows": true}, "script": {"scripts": {"0ba73c94c4e040d6928d25109f02b0e6.scriptinstance": {"id": "46548b9fc6ef4e8caab2822af6120e04.scriptInstance", "name": "Instance of '_PointifyScriptNoise2'", "scriptRef": "c53b572a593e4d25b4c93b4f90bab5ea.script", "sortValue": 0, "options": {"enabled": true, "sprite": {"enabled": true, "textureRef": "feacff5e61fc469a8ea10fd5f00866e7.texture"}, "size": 150}}}}}, "hidden": false, "id": "5d54657f5cc5494b9ba39a9acd105c81.entity"}, "159969fc16b844c782c7f8ba3d1549a3.entity": {"name": "Default Lights", "license": "CC0", "tags": {}, "deleted": false, "created": "2015-01-06T07:40:44.255188+00:00", "modified": "2015-01-06T08:36:57.906680+00:00", "dataModelVersion": 2, "static": false, "components": {"transform": {"translation": [0, 0, 0], "scale": [1, 1, 1], "rotation": [0, 0, 0], "children": {"c8d24c057cb34c0b8027d3aebbe51cef.entity": {"entityRef": "c8d24c057cb34c0b8027d3aebbe51cef.entity", "sortValue": 1}, "84ae6cd6ed7f4778988cb44ab5f9f107.entity": {"entityRef": "84ae6cd6ed7f4778988cb44ab5f9f107.entity", "sortValue": 0}}}}, "hidden": false, "id": "159969fc16b844c782c7f8ba3d1549a3.entity"}, "c8a76c9cb5d848308ab41126d5e9e8bc.entity": {"name": "camera look (v2)", "license": "CC0", "created": "2015-10-10T02:45:36.809Z", "deleted": false, "tags": {}, "dataModelVersion": 2, "modified": "2015-10-10T02:45:36.809Z", "static": false, "components": {"transform": {"translation": [0, 0, 0], "scale": [1, 1, 1], "rotation": [0, 30, 0], "children": {"7053c6583bef4148ae0d3bbb44708997.entity": {"entityRef": "7053c6583bef4148ae0d3bbb44708997.entity", "sortValue": 0}}}, "script": {"scripts": {"32f5b0c1055d4612a1a728b58c67789c.scriptinstance": {"scriptRef": "cd150832f04d4b7fad271449b7b7cd82.script", "name": "Custom script", "sortValue": 0, "options": {"moveFactor": 20, "invert": false, "smoothFactor": 20, "orientationFactor": 20, "xOrientationMid": 45}}}}}, "hidden": false, "id": "c8a76c9cb5d848308ab41126d5e9e8bc.entity"}, "6adf554a20e94014a2bebd73514363a1.scene": {"canvas": {"resolution": {"width": 1920, "height": 1080}, "mode": "Stretch"}, "initialCameraRef": "fbeb9d76fafe4864b218ff4e5e7c3106.entity", "name": "white_glitch", "license": "CC0", "created": "2015-10-10T00:16:23.862099+00:00", "deleted": false, "packs": {"040e8145dfd041d4baa2a93f4bfa926f.pack": {"packRef": "040e8145dfd041d4baa2a93f4bfa926f.pack", "sortValue": 3}, "b4144dbf26694865a44c526b18254ef8.pack": {"packRef": "b4144dbf26694865a44c526b18254ef8.pack", "sortValue": 20}, "377a4f7e73a1438e8cc2e7208577a9ed.pack": {"packRef": "377a4f7e73a1438e8cc2e7208577a9ed.pack", "sortValue": 5}, "6fae007c12814e938141e949d08f11a4.pack": {"packRef": "6fae007c12814e938141e949d08f11a4.pack", "sortValue": 13}, "b9af47bff9354315a594d6ff4998307d.pack": {"packRef": "b9af47bff9354315a594d6ff4998307d.pack", "sortValue": 9}, "2fd112feb9da4c6a9587f22b3f60f1ea.pack": {"packRef": "2fd112feb9da4c6a9587f22b3f60f1ea.pack", "sortValue": 4}, "6070019a859c4778b5decbe1b7877761.pack": {"packRef": "6070019a859c4778b5decbe1b7877761.pack", "sortValue": 8}, "f085a460cc964b7a9f2ea32289118593.pack": {"packRef": "f085a460cc964b7a9f2ea32289118593.pack", "sortValue": 19}, "2a0c577a280d4dffb123937765eb74c0.pack": {"packRef": "2a0c577a280d4dffb123937765eb74c0.pack", "sortValue": 17}, "7ed34a92fde345c1b90f5bcca002f673.pack": {"packRef": "7ed34a92fde345c1b90f5bcca002f673.pack", "sortValue": 0}, "b3946a160deb48edaa4b83bd8e3563e0.pack": {"packRef": "b3946a160deb48edaa4b83bd8e3563e0.pack", "sortValue": 12}, "8088dc06cdae4f22a22e925d5c985473.pack": {"packRef": "8088dc06cdae4f22a22e925d5c985473.pack", "sortValue": 14}, "0123cd6b213a481b81f05b19d7300403.pack": {"packRef": "0123cd6b213a481b81f05b19d7300403.pack", "sortValue": 18}, "4be949208a304f8cb40e5727431059b9.pack": {"packRef": "4be949208a304f8cb40e5727431059b9.pack", "sortValue": 10}, "dfe99973563241298f6512456f4e0e8a.pack": {"packRef": "dfe99973563241298f6512456f4e0e8a.pack", "sortValue": 1}, "bfaed80143df443ca3f9a27366696b65.pack": {"packRef": "bfaed80143df443ca3f9a27366696b65.pack", "sortValue": 15}, "330585b37c444f589bc1b3c76f98c9ba.pack": {"packRef": "330585b37c444f589bc1b3c76f98c9ba.pack", "sortValue": 21}, "949904dd351a4f889fcd62f9bbf87aef.pack": {"packRef": "949904dd351a4f889fcd62f9bbf87aef.pack", "sortValue": 7}, "80980c2cf7644630a3751c5160686d4e.pack": {"packRef": "80980c2cf7644630a3751c5160686d4e.pack", "sortValue": 16}, "a9d82eaff92b4b5fa4aeb5aba0dc99cf.pack": {"packRef": "a9d82eaff92b4b5fa4aeb5aba0dc99cf.pack", "sortValue": 6}}, "environmentRef": "028ae283aca64c15867ad809667ca879.environment", "dataModelVersion": 2, "modified": "2015-10-10T02:56:12.079304+00:00", "entities": {"b2d2756554014d18a607c7b24e8c16f6.entity": {"entityRef": "b2d2756554014d18a607c7b24e8c16f6.entity", "sortValue": 38}, "159969fc16b844c782c7f8ba3d1549a3.entity": {"entityRef": "159969fc16b844c782c7f8ba3d1549a3.entity", "sortValue": 1}, "af05b1d5975947abb2efeb187c2c0654.entity": {"entityRef": "af05b1d5975947abb2efeb187c2c0654.entity", "sortValue": 29}, "c8a76c9cb5d848308ab41126d5e9e8bc.entity": {"entityRef": "c8a76c9cb5d848308ab41126d5e9e8bc.entity", "sortValue": 40}, "c6a3e817f67142fb832c16dc7feb89b0.entity": {"entityRef": "c6a3e817f67142fb832c16dc7feb89b0.entity", "sortValue": 39}}, "posteffectsRef": "9e7a738bc9a448dc8a5ec96685af8cd2.posteffects", "published": "2015-10-10T02:56:10.319899+00:00", "id": "6adf554a20e94014a2bebd73514363a1.scene", "defaultPackRef": "7ed34a92fde345c1b90f5bcca002f673.pack", "publishedUrl": "https://c1.goote.ch/6adf554a20e94014a2bebd73514363a1.scene", "tags": {}}, "43dfa2461ce94a34b3056c2fec28573f.script": {"body": "'use strict';\n\nvar tear = {\n\tattributes : {\n\t\tvertexPosition : goo.MeshData.POSITION,\n\t\tvertexUV0 : goo.MeshData.TEXCOORD0\n\t},\n\tuniforms : {\n\t\tviewMatrix : goo.Shader.VIEW_MATRIX,\n\t\tprojectionMatrix : goo.Shader.PROJECTION_MATRIX,\n\t\tworldMatrix : goo.Shader.WORLD_MATRIX,\n\t\ttDiffuse : goo.Shader.DIFFUSE_MAP,\n\t\tnoise : 'NOISE_MAP',\n\t\tamount : 0.005,\n\t\tsection: 0\n\t},\n\tvshader: [\n\t\t'attribute vec3 vertexPosition;',\n\t\t'attribute vec2 vertexUV0;',\n\n\t\t'uniform mat4 viewMatrix;',\n\t\t'uniform mat4 projectionMatrix;',\n\t\t'uniform mat4 worldMatrix;',\n\n\t\t'varying vec2 vUv;',\n\t\t'void main() {',\n\t\t'vUv = vertexUV0;',\n\t\t\t'gl_Position = projectionMatrix * viewMatrix * worldMatrix * vec4( vertexPosition, 1.0 );',\n\t\t'}'\n\t].join('\\n'),\n\tfshader: [\n\t\t'uniform sampler2D tDiffuse;',\n\t\t'uniform sampler2D noise;',\n\t\t'uniform float amount;',\n\t\t'uniform float section;',\n\n\t\t'varying vec2 vUv;',\n\n\t\t'void main() {',\n\t\t\t'vec2 n = (texture2D(noise, vec2(vUv.y, section)).rg - 0.5) * amount;',\n\t\t\t'vec4 col = texture2D(tDiffuse, vUv + n);',\n\t\t\t'gl_FragColor = col;',\n\t\t'}'\n\t].join('\\n')\n};\n\nvar setup = function(args, ctx, goo) {\n\tvar cameraEntity = ctx.entity;\n\tvar camera = cameraEntity.cameraComponent.camera;\n\tvar transformComponent = cameraEntity.transformComponent;\n\tvar rotation = cameraEntity.transformComponent.transform.rotation;\n\tctx.amount = 0;\n\tctx.rgbamount = 0;\n/*\t\n\tctx.entityData.lookAt = new goo.Vector3();\n\tctx.entityData.rotX = 0;\n\tctx.entityData.rotY = 0;\n\tctx.entityData.rotZ = 0;\n*/\n\tctx.entityData.startfov = camera.fov;\n\tctx.entityData.fov = camera.fov;\n\tctx.entityData.diff = 0;\n\t\n\tctx.entityData.blur = 0;\n\tctx.entityData.blurAccel = 0;\n\t\n\tctx.calc = new goo.Vector3();\n\tctx.rgbRand = 0;\n\n\tvar w = args.lines;\n\tvar h = 32;\n\tvar colorInfo = new Uint8Array(w * h * 4);\n\tfor (var j = 0; j < h; j++) {\n\t\tvar offsetX = 128;\n\t\tvar offsetY = 128;\n\t\t\n\t\tvar glitch1 = 0.97;\n\t\tvar glitch2 = 0.92;\n\t\tvar glitch3 = 0.6;\n\t\tif (Math.random() > 0.5) {\n\t\t\tglitch1 = 0.99;\n\t\t\tglitch2 = 1;\n\t\t\tglitch3 = 1;\n\t\t}\n\t\tfor (var i = 0; i < w; i++) {\n\t\t\tvar rand = Math.random();\n\t\t\tif (rand > glitch1) {\n\t\t\t\toffsetX = Math.random() * 255;\n\t\t\t} else if (rand > glitch2) {\n\t\t\t\toffsetX = 170;\n\t\t\t} else if (rand > glitch3) {\n\t\t\t\toffsetX = 128;\n\t\t\t}\n\n\t\t\tif (rand > 0.98) {\n\t\t\t\toffsetY = 128 + Math.random() * 16;\n\t\t\t} else if (rand > 0.2) {\n\t\t\t\toffsetY = 128;\n\t\t\t}\n\n\t\t\tvar index = (j * w + i) * 4;\n\t\t\tcolorInfo[index + 0] = offsetX;\n\t\t\tcolorInfo[index + 1] = offsetY;\n\t\t\tcolorInfo[index + 2] = 0;\n\t\t\tcolorInfo[index + 3] = 255;\n\t\t}\n\t}\n\tvar noiseMap = new goo.Texture(colorInfo, {\n\t\tmagFilter: 'NearestNeighbor'\n\t}, w, h);\n\n\tvar composer = new goo.Composer();\n\n\tvar renderPass = new goo.RenderPass(ctx.world.getSystem('RenderSystem').renderList);\n/*\n\tvar blurPass = new goo.BlurPass();\n\tctx.blurPass = blurPass;\n*/\t\n\n\tvar outPass = new goo.FullscreenPass(goo.ObjectUtils.clone(goo.ShaderLib.copy));\n\toutPass.renderToScreen = true;\n\n\tcomposer.addPass(renderPass);\n\t\n\tvar rs = ctx.world.gooRunner.renderSystem;\n\tif (rs.composers.length > 0) {\n\t\tvar oldComposer = rs.composers[0];\n\t\tfor (var i = 1; i < oldComposer.passes.length - 1; i++) {\n\t\t\tcomposer.addPass(oldComposer.passes[i], ctx.world.gooRunner.renderer);\n\t\t}\n\t}\n\t\n//\tcomposer.addPass(blurPass, ctx.world.gooRunner.renderer);\n\n\tif (args.bleach) {\n\t\tvar bleachPass = new goo.FullscreenPass(goo.ObjectUtils.deepClone(goo.ShaderLibExtra.bleachbypass));\n\t\tctx.bleachPass = bleachPass;\n\t\tcomposer.addPass(bleachPass);\n\t}\n\n\tif (args.film) {\n\t\tvar filmPass = new goo.FullscreenPass(goo.ObjectUtils.deepClone(goo.ShaderLibExtra.film));\n\t\tfilmPass.material.uniforms.nIntensity = args.nIntensity;\n\t\tfilmPass.material.uniforms.sIntensity = args.sIntensity;\n\t\tfilmPass.material.uniforms.sCount = args.filmlines;\n\n\t\tctx.filmPass = filmPass;\n\t\tcomposer.addPass(filmPass);\n\t}\n\t\nif (args.glitch) {\n    var tearPass = new goo.FullscreenPass(goo.ObjectUtils.deepClone(tear));\n\ttearPass.material.setTexture('NOISE_MAP', noiseMap);\n\tctx.tearPass = tearPass;\n\tcomposer.addPass(tearPass);\n};\n\nif (args.rbgshift) {\n\tvar rgbPass = new goo.FullscreenPass(goo.ObjectUtils.deepClone(goo.ShaderLibExtra.rgbshift));\n\tctx.rgbPass = rgbPass;\n\tcomposer.addPass(rgbPass);\n}\t\n\t\n\tif (args.antialias) {\n\t\tcomposer.addPass(new goo.FullscreenPass(goo.ObjectUtils.deepClone(goo.ShaderLibExtra.antialias)));\n\t}\n\tcomposer.addPass(outPass);\n\t\n\tctx.oldComposers = rs.composers;\n\trs.composers = [composer];\n};\n\nvar cleanup = function(args, ctx, goo) {\n\tvar rs = ctx.world.gooRunner.renderSystem;\n\trs.composers = ctx.oldComposers;\n};\n\nvar update = function(args, ctx, goo) {\n\tvar time = ctx.world.time;\n\tvar tpf = ctx.world.tpf;\n\tif (Math.random() > args.magnitude1) {\n\t\tctx.tearPass.material.uniforms.section = Math.random();\n\t}\n\tvar rand = Math.random();\n\tif (rand > args.magnitude1) {\n\t\tvar amount = Math.random();\n\t\tif (amount < 0.1) {\n\t\t\tamount = 0;\n\t\t}\n\t\tctx.tearPass.material.uniforms.amount = 0.75 * amount * ctx.amount;\n\t} else if (rand > args.magnitude2) {\n\t\tctx.tearPass.material.uniforms.amount = 0;\n\t}\n\tif (ctx.tearPass.material.uniforms.amount > 0 || rand < 0.05) {\n\t\tctx.rgbPass.material.uniforms.amount = Math.random() * 0.1 * ctx.tearPass.material.uniforms.amount * ctx.amount;\n\t\tif (Math.random() > 0.5) {\n\t\t\tctx.rgbPass.material.uniforms.angle = Math.random() * Math.PI * 0.2;\n\t\t}\n\t} else {\n\t\tctx.rgbPass.material.uniforms.amount = 0;\n\t\tctx.rgbPass.material.uniforms.angle = 0;\n\t}\n\n\tif (ctx.tearPass.material.uniforms.amount > 0 || rand < 0.05) {\n\t\tif (Math.random() > 0.9) {\n\t\t\tctx.rgbRand = Math.random();\n\t\t}\n\t\tctx.rgbPass.material.uniforms.amount = ctx.rgbRand * 0.075 * (ctx.tearPass.material.uniforms.amount * 0.5 + 0.5) * ctx.rgbamount;\n\t} else {\n\t\tctx.rgbPass.material.uniforms.amount = 0;\n\t}\n\t\nctx.callbackGlitch=function(data) {\n\tctx.amount = 1;\n\tctx.rgbamount = 1;\n\tconsole.log(\"glitch\");\n};\nctx.callbackGlitchOff=function(data) {\n\tctx.amount = 0;\n\tctx.rgbamount = 0;\n\tconsole.log(\"glitchOff\");\n};\t\n\t\ngoo.SystemBus.addListener('glitchOff', ctx.callbackGlitchOff);\ngoo.SystemBus.addListener('glitch', ctx.callbackGlitch);\n\tvar cameraEntity = ctx.entity;\n\tvar camera = cameraEntity.cameraComponent.camera;\n\t/*\n\tvar transformComponent = cameraEntity.transformComponent;\n\tvar rotation = cameraEntity.transformComponent.transform.rotation;\n\tvar target = args.target ? args.target.getTranslation() : goo.Vector3.ZERO;\n\tctx.calc.setVector(target).addDirect(args.offset[0], args.offset[1], args.offset[2]);\n\n\tctx.entityData.lookAt.lerp(ctx.calc, tpf * 3);\n\tcameraEntity.lookAt(ctx.entityData.lookAt);\n\t\n\tvar globscale = 0.1 * args.shake;\n\tvar scale = (Math.sin(time) * Math.sin(time*2.3+2) * 0.5 + 0.5) * globscale + 0.005;\n\t\n\tvar c1 = 0.3, c2 = 0.3, c3 = 0.2, c4 = 0.1;\n\tvar t1 = 1, t2 = 2, t3 = 4.3, t4 = 8.6;\n\tvar o1 = 0, o2 = 2.0, o3 = 4, o4 = 0.5;\n\tctx.entityData.rotX = Math.sin(time * t1 + o1) * c1 + Math.sin(time * t2 + o2) * c2 + \n\t\tMath.sin(time * t3 + o3) * c3 + Math.sin(time * t4 + o4) * c4;\n\tctx.entityData.rotX *= scale;\n\n\tvar c1 = 0.3, c2 = 0.3, c3 = 0.2, c4 = 0.1;\n\tvar t1 = 1.1, t2 = 2.2, t3 = 4.1, t4 = 9.2;\n\tvar o1 = 2, o2 = 3.4, o3 = 0.3, o4 = 5;\n\tctx.entityData.rotY = Math.sin(time * t1 + o1) * c1 + Math.sin(time * t2 + o2) * c2 + \n\t\tMath.sin(time * t3 + o3) * c3 + Math.sin(time * t4 + o4) * c4;\n\tctx.entityData.rotY *= scale;\n\n\tvar c1 = 0.3, c2 = 0.3, c3 = 0.2, c4 = 0.2;\n\tvar t1 = 0.5, t2 = 1, t3 = 2.3, t4 = 3.7;\n\tvar o1 = 6, o2 = 1.4, o3 = 10.3, o4 = 3;\n\tctx.entityData.rotZ = Math.sin(time * t1 + o1) * c1 + Math.sin(time * t2 + o2) * c2 + \n\t\tMath.sin(time * t3 + o3) * c3 + Math.sin(time * t4 + o4) * c4;\n\tctx.entityData.rotZ *= scale * 0.5;\n\n\trotation.rotateX(ctx.entityData.rotX);\n\trotation.rotateY(ctx.entityData.rotY);\n\trotation.rotateZ(ctx.entityData.rotZ);\n*/\t\n/*\n\tvar fov = ctx.entityData.startfov + Math.floor(Math.sin(time*0.2) * Math.sin(time*0.3+5) * 2) * 10;\n\tctx.entityData.fov = goo.MathUtils.lerp(tpf * 2, ctx.entityData.fov, fov);\n\t\n\tvar fovDiff = Math.abs(ctx.entityData.fov - fov);\n\tif (fovDiff > -1 && Math.random() > 0.995) {\n\t\tctx.entityData.blurAccel = 4;\n\t}\n\tctx.entityData.blurAccel -= tpf * 8;\n\tctx.entityData.blur += ctx.entityData.blurAccel * tpf;\n\tctx.entityData.blur = Math.max(ctx.entityData.blur, 0.2);\n\tctx.blurPass.copyMaterial.uniforms.opacity = ctx.entityData.blur;\n*/\n//\tcamera.setFrustumPerspective(ctx.entityData.fov);\n};\n\nvar parameters = [\n\t{\n\t\tkey: \"bleach\",\n\t\tname: \"Use BleachFX\",\n\t\ttype: \"boolean\",\n\t\tdefault: false\n\t},\n\t{\n\t\tkey: \"glitch\",\n\t\tname: \"Use GlitchFX\",\n\t\ttype: \"boolean\",\n\t\tdefault: false\n\t},\n\t\t{\n\t\tkey: \"rbgshift\",\n\t\tname: \"Use RGBshift\",\n\t\ttype: \"boolean\",\n\t\tdefault: false\n\t},\n\t{\n\t\tkey: \"film\",\n\t\tname: \"Use FilmFX\",\n\t\ttype: \"boolean\",\n\t\tdefault: true\n\t},\n\t{\n\t\tkey: \"antialias\",\n\t\tname: \"Antialias\",\n\t\ttype: \"boolean\",\n\t\tdefault: false\n\t},\n\t{\n\t\tkey: \"nIntensity\",\n\t\tname: \"Film noise\",\n\t\ttype: \"float\",\n\t\tdefault: 0.2,\n\t\tmin: 0.0,\n\t\tmax: 1.0,\n\t\tcontrol: \"slider\"\n\t},\n\t{\n\t\tkey: \"sIntensity\",\n\t\tname: \"Film scan\",\n\t\ttype: \"float\",\n\t\tdefault: 0.2,\n\t\tmin: 0.0,\n\t\tmax: 1.0,\n\t\tcontrol: \"slider\"\n\t},\n\t{\n\t\tkey: \"filmlines\",\n\t\tname: \"Film linecount\",\n\t\ttype: \"int\",\n\t\tdefault: 512\n\t},\n\t{\n\t\tkey: \"lines\",\n\t\tname: \"Lines\",\n\t\ttype: \"int\",\n\t\tdefault: 128\n\t},\n\t{\n\t\tkey: \"magnitude1\",\n\t\tname: \"Glitch prob\",\n\t\ttype: \"float\",\n\t\tdefault: 0.95,\n\t\tmin: 0.0,\n\t\tmax: 1.0,\n\t\tcontrol: \"slider\"\n\t},\n\t{\n\t\tkey: \"magnitude2\",\n\t\tname: \"Glitch length\",\n\t\ttype: \"float\",\n\t\tdefault: 0.85,\n\t\tmin: 0.0,\n\t\tmax: 1.0,\n\t\tcontrol: \"slider\"\n\t},\n\t{\n\t\tkey: \"amount\",\n\t\tname: \"Glitch amount\",\n\t\ttype: \"float\",\n\t\tdefault: 0.5\n\t},\n\t{\n\t\tkey: \"rgbamount\",\n\t\tname: \"Glitch RGB amount\",\n\t\ttype: \"float\",\n\t\tdefault: 0.5\n\t},\n\t{\n\t\tkey: 'target',\n\t\tname: 'Target',\n\t\ttype: 'entity'\n\t},\n\t{\n\t\tkey: 'offset',\n\t\tname: 'Offset',\n\t\ttype: 'vec3',\n\t\tdefault: [0, 0, 0]\n\t},\n\t{\n\t\tkey: \"shake\",\n\t\tname: \"Shake amount\",\n\t\ttype: \"float\",\n\t\tdefault: 1.0\n\t}\n];\n", "name": "_Passes", "license": "CC0", "created": "2015-07-18T22:22:38.845Z", "deleted": false, "dataModelVersion": 2, "modified": "2015-07-18T22:22:38.845Z", "dependencies": {}, "id": "43dfa2461ce94a34b3056c2fec28573f.script"}, "af05b1d5975947abb2efeb187c2c0654.entity": {"name": "center", "license": "CC0", "tags": {}, "deleted": false, "created": "2015-09-29T14:22:17.348Z", "dataModelVersion": 2, "modified": "2015-09-29T14:22:17.348Z", "static": false, "components": {"transform": {"rotation": [0, 0, 0], "scale": [1, 1, 1], "translation": [-20, 80, 0], "children": {"f4bd783767b3423c96d89e7f9e67c242.entity": {"entityRef": "f4bd783767b3423c96d89e7f9e67c242.entity", "sortValue": 0}}}}, "hidden": false, "id": "af05b1d5975947abb2efeb187c2c0654.entity"}, "3c4843d7401b48b3a52378dc0240d3df.texture": {"wrapS": "Repeat", "minFilter": "BilinearNoMipMaps", "imageRef": "cc36f2c74e0fc82f972cba71d9bb4b907afc7360.png", "license": "CC0", "flipY": true, "deleted": false, "name": "marker_2.png", "magFilter": "Bilinear", "created": "2015-10-09T21:06:52.231Z", "dataModelVersion": 2, "modified": "2015-10-09T21:06:52.231Z", "matchFileName": "marker_2.png", "repeat": [1, 1], "lodBias": 0, "offset": [0, 0], "id": "3c4843d7401b48b3a52378dc0240d3df.texture", "generateMipmaps": false, "anisotropy": 1, "wrapT": "Repeat"}, "b2d2756554014d18a607c7b24e8c16f6.entity": {"name": "offf 2", "license": "CC0", "tags": {}, "deleted": false, "created": "2015-10-10T01:46:01.816Z", "dataModelVersion": 2, "modified": "2015-10-10T01:46:01.816Z", "static": false, "components": {"transform": {"rotation": [0, 0, 0], "scale": [10, 10, 10], "translation": [1.4516234397888184, 4.958304405212402, -2.1053905487060547], "children": {"5d54657f5cc5494b9ba39a9acd105c81.entity": {"entityRef": "5d54657f5cc5494b9ba39a9acd105c81.entity", "sortValue": 2}}}}, "hidden": false, "id": "b2d2756554014d18a607c7b24e8c16f6.entity"}, "c6a3e817f67142fb832c16dc7feb89b0.entity": {"name": "grid_medium", "license": "PRIVATE", "tags": {}, "deleted": false, "created": "2015-10-10T01:52:50.071Z", "dataModelVersion": 2, "modified": "2015-10-10T01:52:50.071Z", "static": false, "components": {"meshData": {"meshRef": "5dbc3f23f65646db97be1c36c2c186d1.mesh"}, "transform": {"rotation": [-90, 0, 0], "scale": [10, 10, 10], "translation": [0, -2.6626434326171875, -36.350826263427734]}, "meshRenderer": {"receiveShadows": true, "materials": {"48a092a767d14a6d988e0c05d247c30f.material": {"materialRef": "48a092a767d14a6d988e0c05d247c30f.material", "sortValue": 0}}, "reflectable": true, "cullMode": "Dynamic", "castShadows": true}, "script": {"scripts": {"3b4bd8fcb2324b85a6654a74ce0c22b9.scriptinstance": {"id": "67dd20b5edc74cd0bd6ce4e9a06aae3f.scriptInstance", "name": "Instance of '_webcam_texture 3'", "scriptRef": "9bdc7c35059f4dc1aebaf6294290db06.script", "sortValue": 0, "options": {"enabled": true, "sprite": {"enabled": true, "textureRef": "3c4843d7401b48b3a52378dc0240d3df.texture"}, "size": 300}}}}}, "hidden": false, "id": "c6a3e817f67142fb832c16dc7feb89b0.entity"}, "a3dff8903c8e4440a2a8b2d1238e6c7e.material": {"texturesMapping": {}, "flat": false, "cullState": {"frontFace": "CCW", "enabled": true, "cullFace": "Back"}, "uniforms": {"opacity": {"enabled": true, "value": 1}, "refractivity": {"enabled": true, "value": 0}, "materialAmbient": {"enabled": true, "value": [0.2, 0.2, 0.2, 1]}, "materialSpecular": {"enabled": true, "value": [0.2, 0.2, 0.2, 1]}, "fresnel": {"enabled": true, "value": 0}, "reflectivity": {"enabled": true, "value": 0}, "materialSpecularPower": {"enabled": true, "value": 20}, "materialDiffuse": {"enabled": true, "value": [0.8, 0.8, 0.8, 1]}, "vertexColorAmount": {"enabled": true, "value": 1}, "materialEmissive": {"enabled": true, "value": [0, 0, 0, 1]}, "discardThreshold": {"enabled": false, "value": 0.1}, "normalMultiplier": {"enabled": true, "value": 1}, "etaRatio": {"enabled": true, "value": -0.5}, "wrapSettings": {"enabled": true, "value": [0, 0]}}, "name": "defaultMat", "license": "CC0", "created": "2015-10-09T15:17:19.580405+00:00", "deleted": false, "wireframe": false, "dataModelVersion": 2, "blendState": {"blendDst": "OneMinusSrcAlphaFactor", "blendSrc": "SrcAlphaFactor", "blendEquation": "AddEquation", "blending": "NoBlending"}, "modified": "2015-10-09T15:17:19.580405+00:00", "dualTransparency": false, "depthState": {"write": true, "enabled": true}, "shaderRef": "GOO_ENGINE_SHADERS/uber", "id": "a3dff8903c8e4440a2a8b2d1238e6c7e.material", "renderQueue": -1}, "5dbc3f23f65646db97be1c36c2c186d1.mesh": {"name": "", "license": "PRIVATE", "created": "2015-09-29T14:55:03.114969+00:00", "boundingVolume": {"max": [2.5, 1.8874475e-07, 2.5], "type": "BoundingBox", "min": [-2.5, -1.8874475e-07, -2.5]}, "modified": "2015-09-29T14:55:03.114969+00:00", "dataModelVersion": 2, "deleted": false, "vertexCount": 28759, "indexModes": ["Triangles"], "indices": [0, 28764, "uint16"], "attributes": {"POSITION": {"dimensions": 3, "value": [57528, 86277, "float32"]}, "TEXCOORD0": {"dimensions": 2, "value": [402636, 57518, "float32"]}, "TANGENT": {"dimensions": 4, "value": [632708, 115036, "float32"]}, "NORMAL": {"dimensions": 3, "value": [1092852, 86277, "float32"]}}, "binaryRef": "24965460675585097e2b06520eb574e34e497224.bin", "type": "Mesh", "id": "5dbc3f23f65646db97be1c36c2c186d1.mesh", "indexLengths": [28764]}}