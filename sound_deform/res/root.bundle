{"e7e9b2424b4645adb9c25f7223655465.material": {"flat": false, "cullState": {"frontFace": "CCW", "enabled": true, "cullFace": "Back"}, "uniforms": {"opacity": {"enabled": false, "value": 1}, "refractivity": {"enabled": false, "value": 0}, "materialAmbient": {"enabled": true, "value": [0.2, 0.2, 0.2, 1]}, "materialSpecular": {"enabled": true, "value": [0.2, 0.2, 0.2, 1]}, "fresnel": {"enabled": true, "value": 0}, "reflectivity": {"enabled": true, "value": 0}, "materialSpecularPower": {"enabled": true, "value": 20}, "materialDiffuse": {"enabled": true, "value": [0.8, 0.8, 0.8, 1]}, "vertexColorAmount": {"enabled": true, "value": 1}, "materialEmissive": {"enabled": true, "value": [0, 0, 0, 1]}, "discardThreshold": {"enabled": true, "value": 0.1}, "normalMultiplier": {"enabled": true, "value": 1}, "etaRatio": {"enabled": true, "value": -0.5}, "reflectionType": 0, "wrapSettings": {"enabled": true, "value": [0, 0]}}, "name": "defaultMat", "license": "CC0", "created": "2015-11-30T19:05:00.433176+00:00", "deleted": false, "id": "e7e9b2424b4645adb9c25f7223655465.material", "wireframe": false, "dataModelVersion": 2, "blendState": {"blendEquation": "AddEquation", "blendSrc": "SrcAlphaFactor", "blendDst": "OneMinusSrcAlphaFactor", "blending": "NoBlending"}, "modified": "2015-11-30T19:05:00.433176+00:00", "dualTransparency": false, "depthState": {"write": true, "enabled": true}, "shaderRef": "GOO_ENGINE_SHADERS/uber", "texturesMapping": {}, "renderQueue": -1}, "363811579ab14c75960c7bed0e5511c6.entity": {"name": "Directional 0", "license": "CC0", "tags": {}, "deleted": false, "created": "2015-07-27T15:45:29.196Z", "dataModelVersion": 2, "modified": "2015-07-27T15:45:29.196Z", "static": false, "components": {"light": {"direction": [0, 0, 0], "shadowCaster": false, "color": [1, 1, 1, 1], "intensity": 0.8, "range": 60, "specularIntensity": 1, "penumbra": 5, "angle": 30, "type": "DirectionalLight", "shadowSettings": {"fov": 55, "darkness": 1, "far": 60, "near": 1, "resolution": [256, 256], "shadowType": "Basic", "size": 100}}, "transform": {"rotation": [-38, 21, -18], "scale": [1, 1, 1], "translation": [16, 20.5, 23.3]}}, "hidden": false, "id": "363811579ab14c75960c7bed0e5511c6.entity"}, "3df6d096a9924e0d8e39e2f666afd91f.script": {"body": "var setup = function(args, ctx, goo) {\n\t\n\tctx.w = 8;\n    ctx.h = 2;\n\t\n\tctx.freqs = 1;\n\tctx.deform = 1;\n\t\n\tctx.colorInfo = new Uint8Array(ctx.w * ctx.h * 4);\n    ctx.tex = new goo.Texture(ctx.colorInfo, null, ctx.w, ctx.h);\n\t\n    var material = new goo.Material('MyMaterial');\n    material.shader = goo.Material.createShader({\n    attributes: {\n       vertexPosition: goo.MeshData.POSITION,\n       vertexUV0: goo.MeshData.TEXCOORD0,\n\t   vertexNormal: goo.MeshData.NORMAL\n    },\n    uniforms: {\n       viewProjectionMatrix: goo.Shader.VIEW_PROJECTION_MATRIX,\n       worldMatrix: goo.Shader.WORLD_MATRIX,\n\t   diffuseMap: 'DIFFUSE_MAP',\n       time : function() {return goo.World.time;},\n    },\n    vshader : [\n\t\t'attribute vec3 vertexPosition;',\n\t\t'attribute vec2 vertexUV0;',\n\t\t\"attribute vec3 vertexNormal;\",\n\t\t'varying vec2 texCoord0;',\n\t\t'uniform mat4 viewProjectionMatrix;',\n\t\t'uniform mat4 worldMatrix;',\n\t\t'uniform float size;',\n\t\t'uniform float deform;',\n\t\t'uniform sampler2D diffuseMap;',\n\t\t'uniform float time;',\n\t\t\n\t\t\t\t 'varying float noise;',\n\t\t \n\t\t 'vec3 mod289(vec3 x)',\n'{',\n'  return x - floor(x * (1.0 / 289.0)) * 289.0;',\n'}',\n\n'vec4 mod289(vec4 x)',\n'{',\n'  return x - floor(x * (1.0 / 289.0)) * 289.0;',\n'}',\n\n'vec4 permute(vec4 x)',\n'{',\n'  return mod289(((x*34.0)+1.0)*x);',\n'}',\n\n'vec4 taylorInvSqrt(vec4 r)',\n'{',\n'  return 1.79284291400159 - 0.85373472095314 * r;',\n'}',\n\n'vec3 fade(vec3 t) {',\n'  return t*t*t*(t*(t*6.0-15.0)+10.0);',\n'}',\n\n'// Classic Perlin noise',\n'float cnoise(vec3 P)',\n'{',\n'  vec3 Pi0 = floor(P); // Integer part for indexing',\n'  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1',\n'  Pi0 = mod289(Pi0);',\n'  Pi1 = mod289(Pi1);',\n'  vec3 Pf0 = fract(P); // Fractional part for interpolation',\n'  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0',\n'  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);',\n'  vec4 iy = vec4(Pi0.yy, Pi1.yy);',\n'  vec4 iz0 = Pi0.zzzz;',\n'  vec4 iz1 = Pi1.zzzz;',\n\n'  vec4 ixy = permute(permute(ix) + iy);',\n'  vec4 ixy0 = permute(ixy + iz0);',\n'  vec4 ixy1 = permute(ixy + iz1);',\n\n'  vec4 gx0 = ixy0 * (1.0 / 7.0);',\n'  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;',\n'  gx0 = fract(gx0);',\n'  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);',\n'  vec4 sz0 = step(gz0, vec4(0.0));',\n'  gx0 -= sz0 * (step(0.0, gx0) - 0.5);',\n'  gy0 -= sz0 * (step(0.0, gy0) - 0.5);',\n\n'  vec4 gx1 = ixy1 * (1.0 / 7.0);',\n'  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;',\n'  gx1 = fract(gx1);',\n'  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);',\n'  vec4 sz1 = step(gz1, vec4(0.0));',\n'  gx1 -= sz1 * (step(0.0, gx1) - 0.5);',\n'  gy1 -= sz1 * (step(0.0, gy1) - 0.5);',\n\n'  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);',\n'  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);',\n'  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);',\n'  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);',\n'  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);',\n'  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);',\n'  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);',\n'  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);',\n\n'  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));',\n'  g000 *= norm0.x;',\n'  g010 *= norm0.y;',\n'  g100 *= norm0.z;',\n'  g110 *= norm0.w;',\n'  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));',\n'  g001 *= norm1.x;',\n'  g011 *= norm1.y;',\n'  g101 *= norm1.z;',\n'  g111 *= norm1.w;',\n\n'  float n000 = dot(g000, Pf0);',\n'  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));',\n'  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));',\n'  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));',\n'  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));',\n'  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));',\n'  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));',\n'  float n111 = dot(g111, Pf1);',\n\n'  vec3 fade_xyz = fade(Pf0);',\n'  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);',\n'  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);',\n'  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);',\n'  return 2.2 * n_xyz;',\n'}',\n\n'// Classic Perlin noise, periodic variant',\n'float pnoise(vec3 P, vec3 rep)',\n'{',\n'  vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period',\n'  vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period',\n'  Pi0 = mod289(Pi0);',\n'  Pi1 = mod289(Pi1);',\n'  vec3 Pf0 = fract(P); // Fractional part for interpolation',\n'  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0',\n'  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);',\n'  vec4 iy = vec4(Pi0.yy, Pi1.yy);',\n'  vec4 iz0 = Pi0.zzzz;',\n'  vec4 iz1 = Pi1.zzzz;',\n\n'  vec4 ixy = permute(permute(ix) + iy);',\n'  vec4 ixy0 = permute(ixy + iz0);',\n'  vec4 ixy1 = permute(ixy + iz1);',\n\n'  vec4 gx0 = ixy0 * (1.0 / 7.0);',\n'  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;',\n'  gx0 = fract(gx0);',\n'  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);',\n'  vec4 sz0 = step(gz0, vec4(0.0));',\n'  gx0 -= sz0 * (step(0.0, gx0) - 0.5);',\n'  gy0 -= sz0 * (step(0.0, gy0) - 0.5);',\n\n'  vec4 gx1 = ixy1 * (1.0 / 7.0);',\n'  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;',\n'  gx1 = fract(gx1);',\n'  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);',\n'  vec4 sz1 = step(gz1, vec4(0.0));',\n'  gx1 -= sz1 * (step(0.0, gx1) - 0.5);',\n'  gy1 -= sz1 * (step(0.0, gy1) - 0.5);',\n\n'  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);',\n'  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);',\n'  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);',\n'  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);',\n'  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);',\n'  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);',\n'  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);',\n'  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);',\n\n'  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));',\n'  g000 *= norm0.x;',\n'  g010 *= norm0.y;',\n'  g100 *= norm0.z;',\n'  g110 *= norm0.w;',\n'  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));',\n'  g001 *= norm1.x;',\n'  g011 *= norm1.y;',\n'  g101 *= norm1.z;',\n'  g111 *= norm1.w;',\n\n'  float n000 = dot(g000, Pf0);',\n'  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));',\n'  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));',\n'  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));',\n'  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));',\n'  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));',\n'  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));',\n'  float n111 = dot(g111, Pf1);',\n\n'  vec3 fade_xyz = fade(Pf0);',\n'  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);',\n'  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);',\n'  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);',\n'  return 2.2 * n_xyz;',\n'}',\n\n'float turbulence( vec3 p ) {',\n'  float w = 100.0;',\n'  float t = -.5;',\n'  for (float f = 1.0 ; f <= 10.0 ; f++ ){',\n'    float power = pow( 2.0, f );',\n'    t += abs( pnoise( vec3( power * p ), vec3( 10.0, 10.0, 10.0 ) ) / power );',\n'  }',\n'  return t;',\n'}',\n\t\t\n\t\t\n\t\t'void main(void) {',\n\t\t'noise = 10.0 *  -.10 * turbulence( .5 * vertexNormal + time );',\n\t\t  // get a 3d noise using the position, low frequency\n\t\t 'float b = 6.0 * pnoise( 0.05 * vertexPosition + vec3( 0.5 * time ), vec3( 100.0 ) );',\n          // compose both noises\n   \t\t ' float displacement = -noise*5.0 + b;',\n\t\t\n\t\t\n\t\t\t'texCoord0 = vertexUV0;',\n\t\t\t'float scale = 15.0;',\n\t\t\t'float bias = 0.1;',\n\t\t\t'float h = 0.0;',\n\t\t\t'h = scale * ((texture2D(diffuseMap, texCoord0).r) - bias);',\n// \t\t\t'clamp(h, 0.0, 1.0);',\n\t\t\t\"vec4 worldPos = worldMatrix * vec4(vertexPosition, 1.0);\",\n\t\t\t'worldPos.xyz += vertexNormal * (h+0.01) * displacement*0.1;',\n\t\t\t'gl_Position = viewProjectionMatrix * worldPos;',\n// \t\t\t'gl_PointSize = size / gl_Position.w;',\n\t\t'}'\n\t\t].join('\\n'),\n\t\t\n    fshader : [\n\t\t'uniform float time;',\n\t\t'uniform float deform;',\n\t\t'uniform sampler2D diffuseMap;',\n\t\t'varying vec2 texCoord0;',\n\n\t\t'void main( void ) {',\n\t\t\t'vec3 color = texture2D(diffuseMap, texCoord0).rgb;',\n\n\t\t\t'gl_FragColor = vec4(1.0,1.0,1.0,1.0);',\n\t\t'}',\t\n\t\t].join('\\n')\n    });\n    ctx.entity.meshRendererComponent.materials[0] = material;\n    ctx.entity.meshRendererComponent.materials[0].setTexture('DIFFUSE_MAP', ctx.tex);\n\tctx.entity.meshRendererComponent.materials[0].wireframe = true;\n \n};\n \nvar cleanup = function(args, ctx, goo) {};\nvar update = function(args, ctx, goo) {\n// \tctx.deform = 1;\n\tif (!ctx.worldData.freqByte)\n\t{ctx.freqs = 1;}\n\telse {\n\t\tctx.freqs = ctx.worldData.freqByte;\n\t}\n// \tif (ctx.freqs) {\n// \tfor (var i = 0; i < ctx.freqs.length; i++) {\n// \t\tctx.deform += Math.abs(ctx.freqs[i])/ctx.freqs.length;\n// \t}\n// \t}\n// \telse {\n// \tctx.freqs = 1;\n// \t}\n// \tctx.deform = ctx.deform/64;\t\n// \tfor (var i = 0; i < ctx.w; i++) {\n//         for (var j = 0; j < ctx.h; j++) {\n//             var index = j+i;\n\n//             ctx.colorInfo[index * 4 + 0] = ctx.freqs[index]; // red\n//             ctx.colorInfo[index * 4 + 1] = 0; // green\n//             ctx.colorInfo[index * 4 + 2] = 0; // blue\n//             ctx.colorInfo[index * 4 + 3] = 255; // alpha\n//         }\n//     }\n\t\tfor (var i = 0; i < ctx.colorInfo.length; i++) {\n\t\t\tctx.colorInfo[i * 4 + 0] = Math.abs(ctx.freqs[i]); // red\n            ctx.colorInfo[i * 4 + 1] = Math.sin(goo.World.time)*255; // green\n            ctx.colorInfo[i * 4 + 2] = Math.cos(goo.World.time)*255; // blue\n            ctx.colorInfo[i * 4 + 3] = 255; // alpha\n\t}\t\n    ctx.tex.setNeedsUpdate();\n};\n \nvar parameters = [];", "name": "sound_into_shader", "license": "CC0", "created": "2015-12-14T16:02:27.008Z", "deleted": false, "dataModelVersion": 2, "modified": "2015-12-14T16:02:27.008Z", "id": "3df6d096a9924e0d8e39e2f666afd91f.script"}, "8ece3925e2ad44f0b30a49ce8f4eabe0.entity": {"name": "Sphere", "license": "CC0", "tags": {}, "deleted": false, "created": "2015-12-14T17:01:11.992Z", "dataModelVersion": 2, "modified": "2015-12-14T17:01:11.992Z", "static": false, "components": {"meshData": {"shape": "Sphere", "shapeOptions": {"radialSamples": 32, "textureMode": "Projected", "radius": 0.5, "zSamples": 32}}, "transform": {"rotation": [0, 0, 0], "scale": [4, 4, 4], "translation": [0, -9.057251930236816, 0]}, "meshRenderer": {"receiveShadows": true, "materials": {"30d936dab88a49eabb3545fc798624ce.material": {"materialRef": "30d936dab88a49eabb3545fc798624ce.material", "sortValue": 0}}, "reflectable": true, "cullMode": "Dynamic", "castShadows": true}, "script": {"scripts": {"16f15f690b9d41e48c6efdb0ca666f4b.scriptinstance": {"id": "16f15f690b9d41e48c6efdb0ca666f4b.scriptinstance", "name": "Instance of Script", "scriptRef": "17f4b75f771e4d758e2b1ffd68894657.script", "sortValue": 0, "options": {"lifeTimeMax": 6, "warmup": 1, "countX": 512, "enabled": false, "particleColor": [1, 0.446078431372549, 0], "texture": {"enabled": true}, "entity": {"enabled": true}, "countY": 512, "forceMax": 0.06, "cleanup": true, "gravityFactor": -1.5, "dampingFactor": 2, "forceMin": 0.05, "lifeTimeMin": 0.5, "particleSize": 40, "ambientColor": [0.0019270833333333267, 0.14513735652749057, 0.4625], "mode": "Add"}}}}}, "hidden": true, "id": "8ece3925e2ad44f0b30a49ce8f4eabe0.entity"}, "5ff1250d58464b41bac5b95de0475b3a.script": {"body": "var rotationState = {\n    x:0,\n    y:0,\n    rx:0,\n    ry:0\n};\n\nvar initialOffset;\n\nvar onMove =function(e) {\n    rotationState.x = e.clientX;\n    rotationState.y = e.clientY;\n};\n\n\nvar setup =function(args, ctx, goo) {\n\tctx.center = ctx.world.by.name('center').first();\n    window.addEventListener('mousemove', onMove);\n    initialOffset = ctx.center.transformComponent.transform.rotation.toAngles();\n    initialOffset.x +=0.00;\n    initialOffset.y +=0.00;\n};\n\nvar cleanup =function(args, ctx, goo) {\n    window.removeEventListener('mousemove', onMove);\n};\n\nvar update =function(args, ctx, goo) {\n    rotationState.rx += (rotationState.x - rotationState.rx) / args.smoothness;\n    rotationState.ry += (rotationState.y - rotationState.ry) / args.smoothness;\n\n    ctx.center.setRotation(\n        (rotationState.ry) /-args.divider*0.1 + initialOffset.x, (rotationState.rx) /-args.divider + initialOffset.y,\n        initialOffset.z\n    );\n};\n\nvar parameters = [{\n    key:'smoothness',\n    type:'float',\n    control:'slider',\n    default:16,\n    min:0.1,\n    max:64\n}, {\n    key:'divider',\n    type:'float',\n    control:'slider',\n    default:1000,\n    min:100,\n    max:10000\n}];\n", "name": "camera_look", "license": "CC0", "created": "2015-06-20T09:41:30.821093+00:00", "deleted": false, "dataModelVersion": 2, "originalAsset": {"version": "c55972d9eb104ef8a477804ce94a2815", "id": "0c5f07f029264ef2b58be8ea68cb0848.script"}, "modified": "2015-06-20T09:58:22.790175+00:00", "dependencies": {}, "id": "5ff1250d58464b41bac5b95de0475b3a.script"}, "467dba84af5642f3af314113958f2f87.material": {"texturesMapping": {}, "flat": false, "cullState": {"frontFace": "CCW", "enabled": true, "cullFace": "Back"}, "uniforms": {"opacity": {"enabled": false, "value": 1}, "refractivity": {"enabled": false, "value": 0}, "materialAmbient": {"enabled": true, "value": [0.1, 0.1, 0.1, 1]}, "materialSpecular": {"enabled": true, "value": [0.6, 0.6, 0.6, 1]}, "fresnel": {"enabled": true, "value": 0.5}, "vertexColorAmount": {"enabled": true, "value": 1}, "materialSpecularPower": {"enabled": true, "value": 64}, "materialDiffuse": {"enabled": true, "value": [0.8, 0.8, 0.8, 1]}, "reflectivity": {"enabled": true, "value": 0.6}, "materialEmissive": {"enabled": true, "value": [0, 0, 0, 1]}, "discardThreshold": {"enabled": true, "value": 0.1}, "normalMultiplier": {"enabled": true, "value": 1}, "etaRatio": {"enabled": true, "value": -0.5}, "reflectionType": 0, "wrapSettings": {"enabled": true, "value": [0, 0]}}, "name": "Default Material 8", "license": "CC0", "created": "2015-12-18T11:30:45.805Z", "deleted": false, "wireframe": false, "dataModelVersion": 2, "blendState": {"blendEquation": "AddEquation", "blendSrc": "SrcAlphaFactor", "blendDst": "OneMinusSrcAlphaFactor", "blending": "NoBlending"}, "modified": "2015-12-18T11:30:45.805Z", "dualTransparency": false, "depthState": {"write": true, "enabled": true}, "shaderRef": "GOO_ENGINE_SHADERS/uber", "id": "467dba84af5642f3af314113958f2f87.material", "renderQueue": -1}, "77eeac76e5a649478c2136f60774d2c7.sound": {"name": "8bit_loop", "license": "CC0", "created": "2015-11-14T18:01:55.803Z", "deleted": false, "audioRefs": {"mp3": "9ae31713e59c820e418a45a1bd4d511587b47034.mp3"}, "dataModelVersion": 2, "modified": "2015-11-14T18:01:55.803Z", "volume": 1, "id": "77eeac76e5a649478c2136f60774d2c7.sound", "loop": false}, "7d9850c0e45141c0b26b8b87af2a51bf.entity": {"name": "Directional 1", "license": "CC0", "tags": {}, "deleted": false, "created": "2015-07-27T15:45:29.198Z", "dataModelVersion": 2, "modified": "2015-07-27T15:45:29.198Z", "static": false, "components": {"light": {"direction": [0, 0, 0], "shadowCaster": false, "color": [1, 1, 1, 1], "intensity": 0.4, "range": 60, "specularIntensity": 1, "penumbra": 5, "angle": 30, "type": "DirectionalLight", "shadowSettings": {"fov": 55, "darkness": 1, "far": 60, "near": 1, "resolution": [256, 256], "shadowType": "Basic", "size": 100}}, "transform": {"rotation": [-31, 129, 0], "scale": [1, 1, 1], "translation": [15, 11.6, -12.2]}}, "hidden": false, "id": "7d9850c0e45141c0b26b8b87af2a51bf.entity"}, "6a096950edc940f18fa8efafcf9e7d47.script": {"body": "'use strict';\n\nvar setup = function(args, ctx, goo) {\n\tctx.vizNode = goo.AudioContext.getContext().createAnalyser();\n\tctx.vizNode.fftSize = args.buckets * 2;\n\tctx.vizNode.smoothingTimeConstant = 0.6;\n\tctx.entity.soundComponent._inNode.connect(ctx.vizNode);\n//  ctx.worldData.freqFloat = new Float32Array(ctx.vizNode.frequencyBinCount);\n\tctx.worldData.freqByte = new Uint8Array(ctx.vizNode.frequencyBinCount);\n};\n\nvar cleanup = function(args, ctx, goo) {\n\tctx.entity.soundComponent._inNode.disconnect(ctx.vizNode);\n};\n\nvar update = function(args, ctx, goo) {\n//  \tctx.vizNode.getFloatFrequencyData(ctx.worldData.freqFloat);\n\t\n \tctx.vizNode.getByteFrequencyData(ctx.worldData.freqByte);\n// \tconsole.log(ctx.worldData.freqByte);\n\t\n};\n\nvar parameters = [{\n\tkey: 'buckets',\n\ttype: 'int',\n\tcontrol: 'select',\n\toptions: [32, 64,128,256,512],\n\t'default': 64\n}];", "name": "sound_vis", "license": "CC0", "created": "2015-11-14T10:30:43.304Z", "deleted": false, "dataModelVersion": 2, "modified": "2015-11-14T10:30:43.304Z", "id": "6a096950edc940f18fa8efafcf9e7d47.script"}, "36d96c7b407f4def989cb8a0cfada3c3.entity": {"name": "Fixed Cam", "license": "CC0", "tags": {}, "deleted": false, "created": "2015-11-13T14:32:50.921Z", "dataModelVersion": 2, "modified": "2015-11-13T14:32:50.921Z", "static": false, "components": {"sound": {"volume": 1, "sounds": {"15f4bb755bf24cf1b2cca2078c59f824.sound": {"soundRef": "15f4bb755bf24cf1b2cca2078c59f824.sound", "sortValue": 1}, "77eeac76e5a649478c2136f60774d2c7.sound": {"soundRef": "77eeac76e5a649478c2136f60774d2c7.sound", "sortValue": 0}}}, "camera": {"fov": 45, "lockedRatio": false, "far": 1000, "followEditorCam": false, "projectionMode": "Perspective", "near": 1, "aspect": 1, "size": 100}, "transform": {"rotation": [0, 0, 0], "scale": [1, 1, 1], "translation": [0, 0, 20], "children": {}}, "script": {"scripts": {}}}, "hidden": false, "id": "36d96c7b407f4def989cb8a0cfada3c3.entity"}, "93d904c772ca44bd8d3f5f2be376368b.environment": {"sound": {"dopplerFactor": 0, "maxDistance": 100, "reverb": 0, "rolloffFactor": 0.4, "volume": 1}, "globalAmbient": [0, 0, 0, 0], "license": "CC0", "created": "2015-07-27T15:45:29.143Z", "deleted": false, "dataModelVersion": 2, "modified": "2015-07-27T15:45:29.143Z", "fog": {"color": [1, 1, 1], "far": 996, "near": 0, "enabled": false}, "backgroundColor": [0, 0, 0, 1], "weather": {"snow": {"velocity": 10, "rate": 10, "enabled": false, "height": 25}}, "id": "93d904c772ca44bd8d3f5f2be376368b.environment", "name": "Default Environment"}, "de9e68c2c9444b9ab874a7c7eacb3c6f.mesh": {"name": "sphere_object1", "license": "CC0", "created": "2016-06-22T18:21:49.008095+00:00", "boundingVolume": {"max": [0.500921368598938, 0.502513885498047, 0.500448048114777], "type": "BoundingBox", "min": [-0.500785052776337, -0.501228928565979, -0.499502629041672]}, "modified": "2016-06-22T18:21:49.008095+00:00", "dataModelVersion": 2, "deleted": false, "vertexCount": 6000, "indexModes": ["Triangles"], "indices": [0, 6000, "uint16"], "attributes": {"POSITION": {"dimensions": 3, "value": [12000, 18000, "float32"]}, "NORMAL": {"dimensions": 3, "value": [84000, 18000, "float32"]}}, "indexLengths": [6000], "type": "Mesh", "id": "de9e68c2c9444b9ab874a7c7eacb3c6f.mesh", "binaryRef": "770257d6cd7096cf9b1959469ffdcc03f7c0f6c3.bin"}, "d7c7e4fabdfb4b388fc7f6b80702d9ac.scene": {"canvas": {"resolution": {"width": 1920, "height": 1080}, "mode": "Stretch"}, "initialCameraRef": "36d96c7b407f4def989cb8a0cfada3c3.entity", "name": "sound_deform", "license": "CC0", "created": "2016-06-22T18:22:26.673899+00:00", "deleted": false, "packs": {"f7336962cb754debbcd050d1ae927688.pack": {"packRef": "f7336962cb754debbcd050d1ae927688.pack", "sortValue": 8}, "4ba9d8191bfc4db0b9b2a7114d26cba1.pack": {"packRef": "4ba9d8191bfc4db0b9b2a7114d26cba1.pack", "sortValue": 3}, "01ae9d1d9c264f5e8dd630aa13e51e44.pack": {"packRef": "01ae9d1d9c264f5e8dd630aa13e51e44.pack", "sortValue": 13}, "b32c734a7023483b987a1fb24667df32.pack": {"packRef": "b32c734a7023483b987a1fb24667df32.pack", "sortValue": 0}, "f2cc138412194d12ab3482291ccd3132.pack": {"packRef": "f2cc138412194d12ab3482291ccd3132.pack", "sortValue": 14}, "70d94d8ef0ae4c4e98c181777a0e7ee3.pack": {"packRef": "70d94d8ef0ae4c4e98c181777a0e7ee3.pack", "sortValue": 9}}, "environmentRef": "93d904c772ca44bd8d3f5f2be376368b.environment", "dataModelVersion": 2, "originalAsset": {"version": "2f870cbe96e94759b1c148b69ee5e26e", "id": "ac9f46781def41a38e654aa43175edba"}, "modified": "2016-06-22T21:59:27.156012+00:00", "entities": {"3da7552dbc90428ab81dba771cc1742c.entity": {"entityRef": "3da7552dbc90428ab81dba771cc1742c.entity", "sortValue": 15}, "8ece3925e2ad44f0b30a49ce8f4eabe0.entity": {"entityRef": "8ece3925e2ad44f0b30a49ce8f4eabe0.entity", "sortValue": 21}, "0b38bf168b5a4fabb84db26e964fcac6.entity": {"entityRef": "0b38bf168b5a4fabb84db26e964fcac6.entity", "sortValue": 8}, "5cb37a618cca4155b0338208bfecdd0e.entity": {"entityRef": "5cb37a618cca4155b0338208bfecdd0e.entity", "sortValue": 18}, "63388964710849d38970d5498e59b2e1.entity": {"entityRef": "63388964710849d38970d5498e59b2e1.entity", "sortValue": 22}, "2b165beedb9d4671ba00a405a3d547c2.entity": {"entityRef": "2b165beedb9d4671ba00a405a3d547c2.entity", "sortValue": 1}}, "posteffectsRef": "b329ac0ef5a34ba183e53d5cd9f7d360.posteffects", "defaultPackRef": "b32c734a7023483b987a1fb24667df32.pack", "id": "d7c7e4fabdfb4b388fc7f6b80702d9ac.scene", "editorCameraSettings": {"camera3d": {"spherical": [2.2833284872145363, 5.398583470577043, 0.038598775598298496], "lookAtPoint": [1.385060336802637, 0.0003212392358839821, -0.00022056642053747984]}, "camera2d": {"spherical": [2, 3.141592653589793, 0], "lookAtPoint": [0, 0, 0]}}, "thumbnailRef": "92ee3f09e7509266231465e8023b4798db42de46.png", "publishedUrl": "https://c1.goote.ch/d7c7e4fabdfb4b388fc7f6b80702d9ac.scene", "published": "2016-06-22T21:59:25.667020+00:00"}, "17f4b75f771e4d758e2b1ffd68894657.script": {"body": "'use strict';\n\nvar cleanup = function(args, ctx, goo) {\n    if (args.cleanup) {\n        if (ctx.entityData.callback) {\n            var index = ctx.world.gooRunner.callbacksPreRender.indexOf(ctx.entityData.callback);\n            if (index !== -1) {\n                ctx.world.gooRunner.callbacksPreRender.splice(index, 1);\n            }\n        }\n        if (ctx.entityData.particleEntity) {\n            ctx.entityData.particleEntity.removeFromWorld();\n            ctx.world.process();\n            // destroy entity as well\n        }\n    }\n};\n\nvar update = function(args, ctx, goo) {\n\tif (!ctx.worldData.freqByte)\n\t{ctx.freqs = 1;}\n\telse {\n\t\tctx.freqs = ctx.worldData.freqByte;\n\t}\n\n\t\tfor (var i = 0; i < ctx.colorInfo.length; i++) {\n\t\t\tctx.colorInfo[i * 4 + 0] = Math.abs(ctx.freqs[i])*10; // red\n            ctx.colorInfo[i * 4 + 1] = ctx.freqs[i]; // green\n            ctx.colorInfo[i * 4 + 2] = ctx.freqs[i]*10; // blue\n            ctx.colorInfo[i * 4 + 3] = 255; // alpha\n\t}\t\n    ctx.tex.setNeedsUpdate();\n};\n\nvar parameters = [\n    {\n        key: 'countX',\n        type: 'int',\n        default: 512\n    },\n    {\n        key: 'countY',\n        type: 'int',\n        default: 256\n    },\n    {\n        key: 'cleanup',\n        name: 'Remove on stop',\n        type: 'boolean',\n        default: true\n    },\n    {\n        key: 'entity',\n        name: 'Emitter Entity',\n        type: 'entity'\n    },\n    {\n        key: 'lifeTimeMin',\n        name: 'Lifetime Min',\n        type: 'float',\n        default: 0.1\n    },\n    {\n        key: 'lifeTimeMax',\n        name: 'Lifetime Max',\n        type: 'float',\n        default: 4\n    },\n    {\n        key: 'forceMin',\n        name: 'Exit Force Min',\n        type: 'float',\n        default: 0.05\n    },\n    {\n        key: 'forceMax',\n        name: 'Exit Force Max',\n        type: 'float',\n        default: 0.06\n    },\n    {\n        key: 'dampingFactor',\n        name: 'Air Damping Factor',\n        type: 'float',\n        default: 2\n    },\n    {\n        key: 'gravityFactor',\n        name: 'Gravity Factor',\n        type: 'float',\n        default: -1.5\n    },\n    {\n        key: 'texture',\n        name: 'Texture',\n        type: 'texture'\n    },\n    {\n        key: 'mode',\n        name: 'Blend Mode',\n        type: 'string',\n        control: 'select',\n        options: [{value: 'Replace', label: 'Replace'}, {value: 'Add', label: 'Add'}],\n        default: 'Replace'\n    },\n    {\n        key: 'particleSize',\n        name: 'Particle Size',\n        type: 'float',\n        default: 50\n    },\n    {\n        key: 'particleColor',\n        name: 'Particle Color',\n        type: 'vec3',\n        control: 'color',\n        default: [0.3, 0.4, 0.9]\n    },\n    {\n        key: 'ambientColor',\n        name: 'Ambient Color',\n        type: 'vec3',\n        control: 'color',\n        default: [0.05, 0.05, 0.05]\n    },\n    {\n        key: 'warmup',\n        name: 'Warmup',\n        type: 'float',\n        default: 0\n    },\n];\n\nvar currentEntity;\n\nfunction createParticleEntity(world, sizeX, sizeY) {\n    var count = sizeX * sizeY;\n\n    var attributeMap = goo.MeshData.defaultMap([goo.MeshData.TEXCOORD0]);\n    var meshData = new goo.MeshData(attributeMap, count);\n    meshData.indexModes = ['Points'];\n\n    var uvs = meshData.getAttributeBuffer(goo.MeshData.TEXCOORD0);\n\n    for (var x = 0; x < sizeX; x++) {\n        for (var y = 0; y < sizeY; y++) {\n            var i = y * sizeX + x;\n\n            uvs[i * 2 + 0] = x / sizeX;\n            uvs[i * 2 + 1] = y / sizeY;\n        }\n    }\n\n    var particleMaterial = new goo.Material(particleShader);\n    particleMaterial.uniforms.materialAmbient = [0, 0, 0, 0];\n    particleMaterial.uniforms.materialEmissive = [0, 0, 0, 0];\n    particleMaterial.uniforms.materialDiffuse = [1, 1, 1, 0];\n    particleMaterial.uniforms.materialSpecular = [0, 0, 0, 0];\n    return world.createEntity(meshData, particleMaterial).addToWorld();\n}\n\nvar particleShader = {\n    attributes: {\n        vertexUV0: goo.MeshData.TEXCOORD0\n    },\n    uniforms: {\n        viewProjectionMatrix: goo.Shader.VIEW_PROJECTION_MATRIX,\n        worldMatrix: goo.Shader.WORLD_MATRIX,\n        positionMap: goo.Shader.DIFFUSE_MAP,\n        cameraPosition : goo.Shader.CAMERA,\n        particleMap: 'PARTICLE_MAP',\n\t\tsoundMap: 'SOUND_MAP',\n        pointSize: 20.0,\n        ambientColor: [1, 1, 1],\n        particleColor: [1, 1, 1]\n    },\n    vshader: [\n        'attribute vec2 vertexUV0;',\n\n        'uniform sampler2D positionMap;',\n\n        'uniform mat4 viewProjectionMatrix;',\n        'uniform mat4 worldMatrix;',\n        'uniform float pointSize;',\n        'uniform vec3 particleColor;',\n        'uniform vec3 cameraPosition;',\n// \t\t'uniform sampler2D soundMap;',\n\n        'varying vec4 color;',\n        'varying vec3 vWorldPos;',\n        'varying vec3 viewPosition;',\n\n        'void main(void) {',\n            'vec4 vertexPosition = texture2D( positionMap, vertexUV0 );',\n            'vec4 worldPos = vertexPosition;',\n            'vWorldPos = vertexPosition.xyz;',\n\n            'gl_Position = viewProjectionMatrix * vec4(vertexPosition.xyz, 1.0);',\n            'gl_PointSize = pointSize / gl_Position.w;',\n            'color = vec4(particleColor, smoothstep(0.0, 1.0, vertexPosition.w));',\n            'viewPosition = cameraPosition - vWorldPos.xyz;',\n        '}'\n    ].join('\\n'),\n    fshader: [\n        'uniform sampler2D particleMap;',\n        'uniform vec3 ambientColor;',\n\t\t'uniform sampler2D soundMap;',\n\n        'varying vec4 color;',\n        'varying vec3 vWorldPos;',\n        'varying vec3 viewPosition;',\n\n        'void main(void)',\n        '{',\n            'vec4 final_color = texture2D(particleMap, gl_PointCoord) * color;',\n             'final_color.rgb += ambientColor;',\n\t\t\t'final_color.rgb *= (texture2D(soundMap, gl_PointCoord).rgb);',\n            'gl_FragColor = final_color;',\n        '}'\n    ].join('\\n')\n};\n\nfunction getParticleUpdateShader() {\n    return {\n        attributes: {\n            vertexPosition: goo.MeshData.POSITION,\n            vertexUV0: goo.MeshData.TEXCOORD0\n        },\n        uniforms: {\n            viewProjectionMatrix: goo.Shader.VIEW_PROJECTION_MATRIX,\n            viewMatrix: goo.Shader.VIEW_MATRIX,\n            worldMatrix: goo.Shader.WORLD_MATRIX,\n            positionMap: goo.Shader.DIFFUSE_MAP,\n            objMat: function (shaderInfo) {\n                return currentEntity.transformComponent.worldTransform.matrix.data;\n            },\n            velocityMap: 'VELOCITY_MAP',\n \t\t\tsoundMap: 'SOUND_MAP',\n            startMap: 'START_MAP',\n            tpf: 0\n        },\n        vshader: [\n            'attribute vec3 vertexPosition;',\n            'attribute vec2 vertexUV0;',\n\n            'uniform mat4 viewProjectionMatrix;',\n            'uniform mat4 worldMatrix;',\n\n            'varying vec2 vUv;',\n\n            'void main() {',\n            '    vUv = vertexUV0;',\n            '    gl_Position = viewProjectionMatrix * (worldMatrix * vec4( vertexPosition, 1.0 ));',\n            '}'\n        ].join('\\n'),\n        fshader: [\n            'uniform sampler2D positionMap;',\n            'uniform sampler2D velocityMap;',\n            'uniform sampler2D startMap;',\n \t\t\t'uniform sampler2D soundMap;',\n            'uniform mat4 objMat;',\n\n            'uniform float tpf;',\n\n            'varying vec2 vUv;',\n\n            'void main() {',\n\t\t\t\t'vec4 sound = texture2D(soundMap, vUv);',\n\t\t\t\t\n                'vec4 pos = texture2D( positionMap, vUv );',\n                'if (pos.w < 0.0) {',\n                    'pos = texture2D( startMap, vUv );',\n                    'pos.xyz = (objMat * vec4(pos.xyz, 1.0)).xyz;',\n                '}',\n                'vec4 vel = texture2D( velocityMap, vUv );',\n                'vec3 newpos = pos.xyz;',\n//  \t\t\t'newpos += sound.xyz*0.1;',\n\n                'gl_FragColor = vec4(newpos + vel.xyz * tpf * (0.02+sound.xyz*10.0) , pos.w - tpf/5.0);',\n            '}'\n        ].join('\\n')\n    };\n}\n\nfunction getParticleUpdateVelocityShader() {\n    return {\n        attributes: {\n            vertexPosition: goo.MeshData.POSITION,\n            vertexUV0: goo.MeshData.TEXCOORD0\n        },\n        uniforms: {\n            viewProjectionMatrix: goo.Shader.VIEW_PROJECTION_MATRIX,\n            worldMatrix: goo.Shader.WORLD_MATRIX,\n            velocityMap: goo.Shader.DIFFUSE_MAP,\n            startMap: 'START_MAP',\n            posMap: 'POS_MAP',\n            tpf: 0,\n            normalMat: function (shaderInfo) {\n                return currentEntity.transformComponent.worldTransform.normalMatrix.data;\n            },\n            dampingFactor: 0.85,\n            gravityFactor: 0.8,\n            time: goo.Shader.TIME\n        },\n        vshader: [\n            'attribute vec3 vertexPosition;',\n            'attribute vec2 vertexUV0;',\n\n            'uniform mat4 viewProjectionMatrix;',\n            'uniform mat4 worldMatrix;',\n\n            'varying vec2 vUv;',\n\n            'void main() {',\n            '    vUv = vertexUV0;',\n            '    gl_Position = viewProjectionMatrix * (worldMatrix * vec4( vertexPosition, 1.0 ));',\n            '}'\n        ].join('\\n'),\n        fshader: [\n            'uniform sampler2D velocityMap;',\n\t\t\t'uniform sampler2D soundMap;',\n            'uniform sampler2D startMap;',\n            'uniform sampler2D posMap;',\n            'uniform float time;',\n            'uniform float tpf;',\n            'uniform float dampingFactor;',\n            'uniform float gravityFactor;',\n            'uniform mat3 normalMat;',\n\n            'varying vec2 vUv;',\n\n            goo.ShaderFragment.noise3d,\n\n            'void main() {',\n                'vec4 vel = texture2D( velocityMap, vUv );',\n\t\t\t\t\n                'if (vel.w < 0.0) {',\n                    'vel = texture2D( startMap, vUv );',\n                    'float l = length(vel.xyz);',\n                    'vel.xyz = normalize(normalMat * vel.xyz) * l;',\n                '} else {',\n                    'vec4 pos = texture2D( posMap, vUv );',\n\n                    'float tt = floor(time * 0.5);',\n                    'vec3 q = pos.xyz * 0.6;',\n                    'float x = snoise(q + vec3(0.0, time * 0.5, 0.0));',\n                    'float y = snoise(q + vec3(100.0 + time * 0.25, 0.0, 0.0));',\n                    'float z = snoise(q + vec3(0.0, 100.0, -time * 0.5));',\n                    'float l = length(vel.xyz);',\n                    'vel.xyz += vec3(x, y, z) * 2.0 * tpf;',\n                    'vel.xyz = normalize(vel.xyz) * l;',\n                '}',\n\n                'gl_FragColor = vec4(vel.xyz * vec3(1.0 - tpf * dampingFactor) - vec3(0.0, tpf*gravityFactor, 0.0), vel.w - tpf);',\n            '}'\n        ].join('\\n')\n    };\n}\n\nvar setup = function(args, ctx, goo) {\n\tctx.w = 8;\n    ctx.h = 8;\n\t\n\tctx.freqs = 1;\n\tctx.deform = 1;\n\t\n\tctx.colorInfo = new Uint8Array(ctx.w * ctx.h * 4);\n    ctx.tex = new goo.Texture(ctx.colorInfo, null, ctx.w, ctx.h);\n\t\n\t\n    currentEntity = args.entity || ctx.entity;\n\n    var gooRunner = ctx.world.gooRunner;\n    var sizeX = args.countX;\n    var sizeY = args.countY;\n\n    console.log(sizeX, sizeY, sizeX * sizeY);\n\n    var positionTarget1 = new goo.RenderTarget(sizeX, sizeY, {\n        type: 'Float',\n        magFilter: 'NearestNeighbor',\n        minFilter: 'NearestNeighborNoMipMaps'\n    });\n    var positionTarget2 = new goo.RenderTarget(sizeX, sizeY, {\n        type: 'Float',\n        magFilter: 'NearestNeighbor',\n        minFilter: 'NearestNeighborNoMipMaps'\n    });\n    var velocityTarget1 = new goo.RenderTarget(sizeX, sizeY, {\n        type: 'Float',\n        magFilter: 'NearestNeighbor',\n        minFilter: 'NearestNeighborNoMipMaps'\n    });\n    var velocityTarget2 = new goo.RenderTarget(sizeX, sizeY, {\n        type: 'Float',\n        magFilter: 'NearestNeighbor',\n        minFilter: 'NearestNeighborNoMipMaps'\n    });\n\n    var positionInfo = new Float32Array(4 * sizeX * sizeY);\n    var velocityInfo = new Float32Array(4 * sizeX * sizeY);\n\n    var meshData = currentEntity.meshDataComponent.meshData;\n\n    var positionStore = new goo.Vector3();\n    var normalStore = new goo.Vector3();\n    var exitVariation = args.exitVariation;\n    var lifeTimeMin = args.lifeTimeMin;\n    var lifeTimeMax = args.lifeTimeMax;\n    var lifeTimeDiff = lifeTimeMax - lifeTimeMin;\n    var forceDiff = args.forceMax - args.forceMin;\n    console.log(args.forceMin, args.forceMax);\n    for (var x = 0; x < sizeX; x++) {\n        for (var y = 0; y < sizeY; y++) {\n            var i = y * sizeX + x;\n\n            var lifeTime = Math.random() * lifeTimeDiff + lifeTimeMin;\n\n            //position\n            getRandomSurfacePosition(meshData, positionStore, normalStore);\n            // transform.applyForward(positionStore, positionStore);\n            positionInfo[i * 4 + 0] = positionStore.x;\n            positionInfo[i * 4 + 1] = positionStore.y;\n            positionInfo[i * 4 + 2] = positionStore.z;\n\n            //lifetime\n            positionInfo[i * 4 + 3] = lifeTime;\n\n            var velocityVariation = Math.random() * forceDiff + args.forceMin;\n            velocityInfo[i * 4 + 0] = normalStore.x * velocityVariation;\n            velocityInfo[i * 4 + 1] = normalStore.y * velocityVariation;\n            velocityInfo[i * 4 + 2] = normalStore.z * velocityVariation;\n\n            //lifetime\n            velocityInfo[i * 4 + 3] = lifeTime;\n        }\n    }\n\n    var positionTexture = new goo.Texture(positionInfo, {\n        type: 'Float',\n        minFilter: 'NearestNeighborNoMipMaps',\n        magFilter: 'NearestNeighbor',\n    }, sizeX, sizeY);\n    positionTexture.format = 'RGBA';\n    positionTexture.generateMipmaps = false;\n\n    var velocityTexture = new goo.Texture(velocityInfo, {\n        type: 'Float',\n        minFilter: 'NearestNeighborNoMipMaps',\n        magFilter: 'NearestNeighbor',\n    }, sizeX, sizeY);\n    velocityTexture.format = 'RGBA';\n    velocityTexture.generateMipmaps = false;\n\n    positionInfo = positionInfo.slice();\n    velocityInfo = velocityInfo.slice();\n    for (var x = 0; x < sizeX; x++) {\n        for (var y = 0; y < sizeY; y++) {\n            var i = y * sizeX + x;\n            positionInfo[i * 4 + 3] = -1;\n            velocityInfo[i * 4 + 3] = -1;\n        }\n    }\n\n    var startPositionTexture = new goo.Texture(positionInfo, {\n        type: 'Float',\n        minFilter: 'NearestNeighborNoMipMaps',\n        magFilter: 'NearestNeighbor',\n    }, sizeX, sizeY);\n    startPositionTexture.format = 'RGBA';\n    startPositionTexture.generateMipmaps = false;\n\n    var startVelocityTexture = new goo.Texture(velocityInfo, {\n        type: 'Float',\n        minFilter: 'NearestNeighborNoMipMaps',\n        magFilter: 'NearestNeighbor',\n    }, sizeX, sizeY);\n    startVelocityTexture.format = 'RGBA';\n    startVelocityTexture.generateMipmaps = false;\n\n    var particleUpdateMaterial = new goo.Material(getParticleUpdateShader());\n    var particleUpdateVelocityMaterial = new goo.Material(getParticleUpdateVelocityShader());\n\n    var sourcePosition = startPositionTexture;\n    var targetPosition = positionTarget2;\n\n    var sourceVelocity = startVelocityTexture;\n    var targetVelocity = velocityTarget2;\n\n    var renderable = {\n        meshData: goo.FullscreenUtils.quad,\n        materials: [],\n        transform: new goo.Transform()\n    };\n\n    var particleEntity = ctx.entityData.particleEntity = createParticleEntity(gooRunner.world, sizeX, sizeY);\n    particleEntity.meshRendererComponent.cullMode = 'Never';\n    if (args.mode === 'Add') {\n        particleEntity.meshRendererComponent.materials[0].depthState.write = false;\n        particleEntity.meshRendererComponent.materials[0].blendState.blending = 'AdditiveBlending';\n    } else if (args.mode === 'Replace') {\n        particleEntity.meshRendererComponent.materials[0].blendState.blending = 'CustomBlending';\n\t\t particleEntity.meshRendererComponent.materials[0].depthState.write = false;\n\t\t particleEntity.meshRendererComponent.materials[0].renderQueue = goo.RenderQueue.TRANSPARENT;\n    }\n    //particleEntity.meshRendererComponent.materials[0].depthState.enabled = false;\n    particleEntity.meshRendererComponent.materials[0].renderQueue = 4000;\n    particleEntity.meshRendererComponent.materials[0].uniforms.pointSize = args.particleSize;\n    particleEntity.meshRendererComponent.materials[0].uniforms.particleColor = args.particleColor;\n    particleEntity.meshRendererComponent.materials[0].uniforms.ambientColor = args.ambientColor;\n    var first = true;\n\n    var particleTexture = args.texture || goo.TextureCreator.DEFAULT_TEXTURE_2D;\n\n    particleUpdateVelocityMaterial.uniforms.dampingFactor = args.dampingFactor;\n    particleUpdateVelocityMaterial.uniforms.gravityFactor = args.gravityFactor;\n\n    var FIXED_TPF = 1 / 60;\n    var counter = 0;\n    ctx.entityData.callback = function (tpf) {\n        var viewMatrix = goo.Renderer.mainCamera.getViewMatrix();\n        var viewProjectionMatrix = goo.Renderer.mainCamera.getViewProjectionMatrix();\n\n        tpf = Math.min(tpf, 1/10);\n        counter += tpf;\n        while (counter >= FIXED_TPF) {\n            counter -= FIXED_TPF;\n\n            renderable.materials[0] = particleUpdateVelocityMaterial;\n            particleUpdateVelocityMaterial.setTexture('DIFFUSE_MAP', sourceVelocity);\n            particleUpdateVelocityMaterial.setTexture('START_MAP', velocityTexture);\n            particleUpdateVelocityMaterial.setTexture('POS_MAP', sourcePosition);\n            particleUpdateVelocityMaterial.uniforms.tpf = FIXED_TPF;\n            gooRunner.renderer.render(renderable, goo.FullscreenUtils.camera, [], targetVelocity, true);\n\n            renderable.materials[0] = particleUpdateMaterial;\n            particleUpdateMaterial.setTexture('DIFFUSE_MAP', sourcePosition);\n            particleUpdateMaterial.setTexture('START_MAP', positionTexture);\n            particleUpdateMaterial.setTexture('VELOCITY_MAP', targetVelocity);\n            particleUpdateMaterial.uniforms.tpf = FIXED_TPF;\n            gooRunner.renderer.render(renderable, goo.FullscreenUtils.camera, [], targetPosition, true);\n\n            if (first) {\n                sourcePosition = positionTarget1;\n                sourceVelocity = velocityTarget1;\n                first = false;\n            }\n\n            var tmp = targetVelocity;\n            targetVelocity = sourceVelocity;\n            sourceVelocity = tmp;\n\n            tmp = targetPosition;\n            targetPosition = sourcePosition;\n            sourcePosition = tmp;\n        }\n\n        particleEntity.meshRendererComponent.materials[0].setTexture('DIFFUSE_MAP', targetPosition);\n        particleEntity.meshRendererComponent.materials[0].setTexture('PARTICLE_MAP', particleTexture);\n\t\tparticleUpdateMaterial.setTexture('SOUND_MAP', ctx.tex);\n    };\n\n    var warmupCount = args.warmup;\n    var warmupTpf = 1 / 60;\n    for (var i = 0; i < warmupCount; i++) {\n        ctx.entityData.callback(warmupTpf);\n    }\n    gooRunner.callbacksPreRender.push(ctx.entityData.callback);\n};\n\nvar triangleVerts = [];\nvar triangleNormals = [];\nvar getRandomSurfacePosition = function(meshData, positionStore, normalStore) {\n    if (meshData.primitiveCounts[0] === 0) {\n        meshData.updatePrimitiveCounts();\n    }\n\n    var sectionCount = meshData.getSectionCount();\n    var sectionIndex = Math.floor(Math.random() * sectionCount);\n\n    var primitiveCount = meshData.getPrimitiveCount(sectionIndex);\n    var primitiveIndex = Math.floor(Math.random() * primitiveCount);\n\n    if (normalStore) {\n        getPrimitiveVertices(meshData, primitiveIndex, sectionIndex, triangleVerts, triangleNormals);\n    } else {\n        getPrimitiveVertices(meshData, primitiveIndex, sectionIndex, triangleVerts);\n    }\n\n    var r1 = Math.sqrt(Math.random());\n    var r2 = Math.random();\n\n    positionStore.setVector(triangleVerts[0].scale(1 - r1));\n    positionStore.addVector(triangleVerts[1].scale(r1 * (1 - r2)));\n    positionStore.addVector(triangleVerts[2].scale(r1 * r2));\n\n    if (normalStore) {\n        normalStore.setVector(triangleNormals[0].scale(1 - r1));\n        normalStore.addVector(triangleNormals[1].scale(r1 * (1 - r2)));\n        normalStore.addVector(triangleNormals[2].scale(r1 * r2));\n    }\n\n    return positionStore;\n};\n\nvar getPrimitiveVertices = function(meshData, primitiveIndex, section, positionStore, normalStore) {\n    var count = meshData.getPrimitiveCount(section);\n    if (primitiveIndex >= count || primitiveIndex < 0) {\n        throw new Error(\"Invalid primitiveIndex '\" + primitiveIndex + \"'.  Count is \" + count);\n    }\n\n    var mode = meshData.indexModes[section];\n    var rSize = goo.MeshData.getVertexCount(mode);\n    var result = positionStore || [];\n    result.length = rSize;\n\n    var verts = meshData.getAttributeBuffer(goo.MeshData.POSITION);\n    var normals = meshData.getAttributeBuffer(goo.MeshData.NORMAL);\n    if (!normals) {\n        normalStore = null;\n    }\n\n    var vert = 0;\n    for (var i = 0; i < rSize; i++) {\n        if (!result[i]) {\n            result[i] = new goo.Vector3();\n        }\n        if (normalStore && !normalStore[i]) {\n            normalStore[i] = new goo.Vector3();\n        }\n\n        if (meshData.getIndexBuffer()) {\n            // indexed geometry\n            vert = meshData.getIndexBuffer()[meshData.getVertexIndex(primitiveIndex, i, section)];\n        } else {\n            // non-indexed geometry\n            vert = meshData.getVertexIndex(primitiveIndex, i, section);\n        }\n\n        result[i].x = verts[vert * 3 + 0];\n        result[i].y = verts[vert * 3 + 1];\n        result[i].z = verts[vert * 3 + 2];\n        if (normalStore) {\n            normalStore[i].x = normals[vert * 3 + 0];\n            normalStore[i].y = normals[vert * 3 + 1];\n            normalStore[i].z = normals[vert * 3 + 2];\n        }\n    }\n\n    return result;\n};", "name": "particles", "license": "CC0", "created": "2015-12-15T13:25:48.392Z", "deleted": false, "dataModelVersion": 2, "modified": "2015-12-15T13:25:48.392Z", "id": "17f4b75f771e4d758e2b1ffd68894657.script"}, "3da7552dbc90428ab81dba771cc1742c.entity": {"name": "play_btn", "license": "CC0", "tags": {}, "deleted": false, "created": "2015-11-13T16:07:57.291Z", "dataModelVersion": 2, "modified": "2015-11-13T16:07:57.291Z", "static": false, "components": {"sound": {"volume": 1, "sounds": {"77eeac76e5a649478c2136f60774d2c7.sound": {"soundRef": "77eeac76e5a649478c2136f60774d2c7.sound", "sortValue": 0}, "0f132ded831742b59db9059dbc0ed9de.sound": {"soundRef": "0f132ded831742b59db9059dbc0ed9de.sound", "sortValue": 1}}}, "html": {"imageRefs": {}, "pixelPerfect": true, "useTransformComponent": false, "innerHtml": "<style type=\"text/css\">\n#button1\n{\n    position:absolute;\n\tleft:10px;\n    top:10px;\n\tmargin:0px;\n\tfont-size: 12px;\n\tbackground: navy;\n\tcolor: white;\n}\n</style>\n<button id='button1'>Play</button>"}, "transform": {"rotation": [-1.3767203960889503e-07, 2.189602337800778e-06, 9.517623026692038e-09], "scale": [1, 1, 1], "translation": [5.037032693167021e-07, 7.22974036193591e-09, -2.0435781067362768e-08]}, "script": {"scripts": {"5699f27de8854eb7b0b323a6dd6ea80f.scriptinstance": {"id": "5699f27de8854eb7b0b323a6dd6ea80f.scriptinstance", "name": "Instance of sound_vis", "scriptRef": "6a096950edc940f18fa8efafcf9e7d47.script", "sortValue": 2, "options": {"buckets": 64, "enabled": true}}, "6af7a99b76264211b62b3f23a675e8b6.scriptinstance": {"id": "6af7a99b76264211b62b3f23a675e8b6.scriptinstance", "name": "Instance of Script", "scriptRef": "6a62ad1227e84b7e88d319964d7f87d7.script", "sortValue": 1, "options": {"sound": "final", "enabled": true}}}}}, "hidden": true, "id": "3da7552dbc90428ab81dba771cc1742c.entity"}, "0f132ded831742b59db9059dbc0ed9de.sound": {"name": "final", "license": "CC0", "created": "2016-06-22T18:55:39.051Z", "deleted": false, "audioRefs": {"mp3": "162d5860bed0804deae3609b64f44a8bf423e431.mp3"}, "dataModelVersion": 2, "modified": "2016-06-22T18:55:39.051Z", "volume": 1, "spatialize": true, "id": "0f132ded831742b59db9059dbc0ed9de.sound", "loop": false, "autoPlay": true}, "00068134cc824f2aa4ce2faaa0a8e394.texture": {"wrapS": "Repeat", "minFilter": "Trilinear", "name": "snowflake.png", "license": "CC0", "flipY": true, "deleted": false, "magFilter": "Bilinear", "created": "2015-12-18T12:23:55.502Z", "dataModelVersion": 2, "modified": "2015-12-18T12:23:55.502Z", "matchFileName": "snowflake.png", "repeat": [1, 1], "imageRef": "9ca1cc0aae8ff9d0116125fab5e244ee2db8125b.png", "anisotropy": 1, "offset": [0, 0], "generateMipmaps": true, "id": "00068134cc824f2aa4ce2faaa0a8e394.texture", "wrapT": "Repeat"}, "15f4bb755bf24cf1b2cca2078c59f824.sound": {"name": "simply", "license": "CC0", "created": "2015-12-18T09:17:07.980Z", "deleted": false, "audioRefs": {"mp3": "417aa40ba1eb3f0d257d27326ff876510b6f8d08.mp3"}, "dataModelVersion": 2, "modified": "2015-12-18T09:17:07.980Z", "volume": 1, "id": "15f4bb755bf24cf1b2cca2078c59f824.sound", "loop": false}, "0b38bf168b5a4fabb84db26e964fcac6.entity": {"name": "center", "license": "CC0", "tags": {}, "deleted": false, "created": "2015-11-13T14:43:51.832Z", "dataModelVersion": 2, "modified": "2015-11-13T14:43:51.832Z", "static": false, "components": {"transform": {"rotation": [0, 180, 0], "scale": [1, 1, 1], "translation": [0, 0, 0], "children": {"36d96c7b407f4def989cb8a0cfada3c3.entity": {"entityRef": "36d96c7b407f4def989cb8a0cfada3c3.entity", "sortValue": 0}}}, "script": {"scripts": {"94bf8840ee8b40f39391894a0e017244.scriptinstance": {"id": "94bf8840ee8b40f39391894a0e017244.scriptinstance", "name": "Instance of camera_look", "scriptRef": "5ff1250d58464b41bac5b95de0475b3a.script", "sortValue": 0, "options": {"divider": 4621.95, "enabled": true, "smoothness": 41.72}}}}}, "hidden": false, "id": "0b38bf168b5a4fabb84db26e964fcac6.entity"}, "5cb37a618cca4155b0338208bfecdd0e.entity": {"name": "sphere", "license": "CC0", "tags": {}, "deleted": false, "created": "2015-12-14T16:01:34.258Z", "dataModelVersion": 2, "modified": "2015-12-14T16:01:34.258Z", "static": false, "components": {"meshData": {"meshRef": "de9e68c2c9444b9ab874a7c7eacb3c6f.mesh"}, "transform": {"rotation": [0, -165.6701781091603, 0], "scale": [0.5, 0.5, 0.5], "translation": [1.3851518630981445, 0, 1.6963216491262573e-16]}, "meshRenderer": {"receiveShadows": true, "materials": {"e7e9b2424b4645adb9c25f7223655465.material": {"materialRef": "e7e9b2424b4645adb9c25f7223655465.material", "sortValue": 0}}, "reflectable": true, "cullMode": "Dynamic", "castShadows": true}, "script": {"scripts": {"85d6f208ec9c43cc87ab0a2fd531d311.scriptinstance": {"id": "85d6f208ec9c43cc87ab0a2fd531d311.scriptinstance", "name": "Instance of shader_bug 2", "scriptRef": "3df6d096a9924e0d8e39e2f666afd91f.script", "sortValue": 0, "options": {"enabled": true}}}}}, "hidden": false, "id": "5cb37a618cca4155b0338208bfecdd0e.entity"}, "63388964710849d38970d5498e59b2e1.entity": {"name": "Box", "license": "CC0", "tags": {}, "deleted": false, "created": "2015-12-18T11:30:45.804Z", "dataModelVersion": 2, "modified": "2015-12-18T11:30:45.804Z", "static": false, "components": {"meshData": {"shape": "Box", "shapeOptions": {"textureMode": "Uniform"}}, "transform": {"rotation": [0, 0, 0], "scale": [13.487109162640005, 1.3573221461639842, 10], "translation": [0, 12, 0]}, "meshRenderer": {"receiveShadows": true, "materials": {"467dba84af5642f3af314113958f2f87.material": {"materialRef": "467dba84af5642f3af314113958f2f87.material", "sortValue": 0}}, "reflectable": true, "cullMode": "Dynamic", "castShadows": true}, "script": {"scripts": {"822adcf9b63b490f9c54786358c9de87.scriptinstance": {"id": "822adcf9b63b490f9c54786358c9de87.scriptinstance", "name": "Instance of particles 2", "scriptRef": "6fa77c44acd54927a35c31d794f6a0f8.script", "sortValue": 1, "options": {"lifeTimeMax": 8, "warmup": 0, "countX": 256, "enabled": false, "particleColor": [0.3, 0.4, 0.9], "texture": {"enabled": true, "textureRef": "00068134cc824f2aa4ce2faaa0a8e394.texture"}, "entity": {"enabled": true}, "countY": 256, "forceMax": 0.06, "cleanup": true, "gravityFactor": 1.5, "dampingFactor": 4, "forceMin": 0.03, "lifeTimeMin": 1, "particleSize": 100, "ambientColor": [0, 0.024264705882353035, 0.4125], "mode": "Replace"}}}}}, "hidden": true, "id": "63388964710849d38970d5498e59b2e1.entity"}, "6a62ad1227e84b7e88d319964d7f87d7.script": {"body": "'use strict';\n\n/* global goo */\n\nvar setup = function (args, ctx) {\n  var sound = {};\n  var soundArray = ctx.world.by.name('Fixed Cam').first().soundComponent.sounds;\n  for(var i = 0, ilen = soundArray.length; i < ilen; i++){\n    sound[soundArray[i].name] = soundArray[i];\n  }\n  var toggle = 0;\t\n  ctx.play = function() {\n\tgoo.SystemBus.emit('dance');\n  if(toggle++ %2 ) {\n\tsound[args.sound].pause();\t\n  }\n  else {  \n//  sound[args.sound].stop();\t\n  sound[args.sound].play();\n }\n};\n\nvar button = document.getElementById('button1');\n  button.addEventListener('click', ctx.play);\n \t ctx.play();\n};\n\nvar cleanup = function (args, ctx) {\n\n};\n\nvar update = function (args, ctx) {\n\n};\n\nvar parameters = [{key: \"sound\",\n    type: \"string\",}];", "name": "play", "license": "CC0", "created": "2015-11-14T12:39:55.275Z", "deleted": false, "dataModelVersion": 2, "modified": "2015-11-14T12:39:55.275Z", "id": "6a62ad1227e84b7e88d319964d7f87d7.script"}, "6fa77c44acd54927a35c31d794f6a0f8.script": {"body": "'use strict';\n\nvar cleanup = function(args, ctx, goo) {\n    if (args.cleanup) {\n        if (ctx.entityData.callback) {\n            var index = ctx.world.gooRunner.callbacksPreRender.indexOf(ctx.entityData.callback);\n            if (index !== -1) {\n                ctx.world.gooRunner.callbacksPreRender.splice(index, 1);\n            }\n        }\n        if (ctx.entityData.particleEntity) {\n            ctx.entityData.particleEntity.removeFromWorld();\n            ctx.world.process();\n            // destroy entity as well\n        }\n    }\n};\n\nvar update = function(args, ctx, goo) {\n\tif (!ctx.worldData.freqByte)\n\t{ctx.freqs = 1;}\n\telse {\n\t\tctx.freqs = ctx.worldData.freqByte;\n\t}\n\n\t\tfor (var i = 0; i < ctx.colorInfo.length; i++) {\n\t\t\tctx.colorInfo[i * 4 + 0] = Math.abs(ctx.freqs[i])*10; // red\n            ctx.colorInfo[i * 4 + 1] = ctx.freqs[i]; // green\n            ctx.colorInfo[i * 4 + 2] = ctx.freqs[i]*10; // blue\n            ctx.colorInfo[i * 4 + 3] = 255; // alpha\n\t}\t\n    ctx.tex.setNeedsUpdate();\n};\n\nvar parameters = [\n    {\n        key: 'countX',\n        type: 'int',\n        default: 512\n    },\n    {\n        key: 'countY',\n        type: 'int',\n        default: 256\n    },\n    {\n        key: 'cleanup',\n        name: 'Remove on stop',\n        type: 'boolean',\n        default: true\n    },\n    {\n        key: 'entity',\n        name: 'Emitter Entity',\n        type: 'entity'\n    },\n    {\n        key: 'lifeTimeMin',\n        name: 'Lifetime Min',\n        type: 'float',\n        default: 0.1\n    },\n    {\n        key: 'lifeTimeMax',\n        name: 'Lifetime Max',\n        type: 'float',\n        default: 4\n    },\n    {\n        key: 'forceMin',\n        name: 'Exit Force Min',\n        type: 'float',\n        default: 0.05\n    },\n    {\n        key: 'forceMax',\n        name: 'Exit Force Max',\n        type: 'float',\n        default: 0.06\n    },\n    {\n        key: 'dampingFactor',\n        name: 'Air Damping Factor',\n        type: 'float',\n        default: 2\n    },\n    {\n        key: 'gravityFactor',\n        name: 'Gravity Factor',\n        type: 'float',\n        default: -1.5\n    },\n    {\n        key: 'texture',\n        name: 'Texture',\n        type: 'texture'\n    },\n    {\n        key: 'mode',\n        name: 'Blend Mode',\n        type: 'string',\n        control: 'select',\n        options: [{value: 'Replace', label: 'Replace'}, {value: 'Add', label: 'Add'}],\n        default: 'Replace'\n    },\n    {\n        key: 'particleSize',\n        name: 'Particle Size',\n        type: 'float',\n        default: 50\n    },\n    {\n        key: 'particleColor',\n        name: 'Particle Color',\n        type: 'vec3',\n        control: 'color',\n        default: [0.3, 0.4, 0.9]\n    },\n    {\n        key: 'ambientColor',\n        name: 'Ambient Color',\n        type: 'vec3',\n        control: 'color',\n        default: [0.05, 0.05, 0.05]\n    },\n    {\n        key: 'warmup',\n        name: 'Warmup',\n        type: 'float',\n        default: 0\n    },\n];\n\nvar currentEntity;\n\nfunction createParticleEntity(world, sizeX, sizeY) {\n    var count = sizeX * sizeY;\n\n    var attributeMap = goo.MeshData.defaultMap([goo.MeshData.TEXCOORD0]);\n    var meshData = new goo.MeshData(attributeMap, count);\n    meshData.indexModes = ['Points'];\n\n    var uvs = meshData.getAttributeBuffer(goo.MeshData.TEXCOORD0);\n\n    for (var x = 0; x < sizeX; x++) {\n        for (var y = 0; y < sizeY; y++) {\n            var i = y * sizeX + x;\n\n            uvs[i * 2 + 0] = x / sizeX;\n            uvs[i * 2 + 1] = y / sizeY;\n        }\n    }\n\n    var particleMaterial = new goo.Material(particleShader);\n    particleMaterial.uniforms.materialAmbient = [0, 0, 0, 0];\n    particleMaterial.uniforms.materialEmissive = [0, 0, 0, 0];\n    particleMaterial.uniforms.materialDiffuse = [1, 1, 1, 0];\n    particleMaterial.uniforms.materialSpecular = [0, 0, 0, 0];\n    return world.createEntity(meshData, particleMaterial).addToWorld();\n}\n\nvar particleShader = {\n    attributes: {\n        vertexUV0: goo.MeshData.TEXCOORD0\n    },\n    uniforms: {\n        viewProjectionMatrix: goo.Shader.VIEW_PROJECTION_MATRIX,\n        worldMatrix: goo.Shader.WORLD_MATRIX,\n        positionMap: goo.Shader.DIFFUSE_MAP,\n        cameraPosition : goo.Shader.CAMERA,\n        particleMap: 'PARTICLE_MAP',\n\t\tsoundMap: 'SOUND_MAP',\n        pointSize: 20.0,\n        ambientColor: [1, 1, 1],\n        particleColor: [1, 1, 1]\n    },\n    vshader: [\n        'attribute vec2 vertexUV0;',\n\n        'uniform sampler2D positionMap;',\n\n        'uniform mat4 viewProjectionMatrix;',\n        'uniform mat4 worldMatrix;',\n        'uniform float pointSize;',\n        'uniform vec3 particleColor;',\n        'uniform vec3 cameraPosition;',\n// \t\t'uniform sampler2D soundMap;',\n\n        'varying vec4 color;',\n        'varying vec3 vWorldPos;',\n        'varying vec3 viewPosition;',\n\n        'void main(void) {',\n            'vec4 vertexPosition = texture2D( positionMap, vertexUV0 );',\n            'vec4 worldPos = vertexPosition;',\n            'vWorldPos = vertexPosition.xyz;',\n\n            'gl_Position = viewProjectionMatrix * vec4(vertexPosition.xyz, 1.0);',\n            'gl_PointSize = pointSize / gl_Position.w;',\n            'color = vec4(particleColor, smoothstep(0.0, 1.0, vertexPosition.w));',\n            'viewPosition = cameraPosition - vWorldPos.xyz;',\n        '}'\n    ].join('\\n'),\n    fshader: [\n        'uniform sampler2D particleMap;',\n        'uniform vec3 ambientColor;',\n\t\t'uniform sampler2D soundMap;',\n\n        'varying vec4 color;',\n        'varying vec3 vWorldPos;',\n        'varying vec3 viewPosition;',\n\n        'void main(void)',\n        '{',\n            'vec4 final_color = texture2D(particleMap, gl_PointCoord) * color;',\n//              'final_color.rgb += ambientColor;',\n\t\t\t'final_color.rgb += (texture2D(soundMap, gl_PointCoord).rgb);',\n            'gl_FragColor = final_color;',\n        '}'\n    ].join('\\n')\n};\n\nfunction getParticleUpdateShader() {\n    return {\n        attributes: {\n            vertexPosition: goo.MeshData.POSITION,\n            vertexUV0: goo.MeshData.TEXCOORD0\n        },\n        uniforms: {\n            viewProjectionMatrix: goo.Shader.VIEW_PROJECTION_MATRIX,\n            viewMatrix: goo.Shader.VIEW_MATRIX,\n            worldMatrix: goo.Shader.WORLD_MATRIX,\n            positionMap: goo.Shader.DIFFUSE_MAP,\n            objMat: function (shaderInfo) {\n                return currentEntity.transformComponent.worldTransform.matrix.data;\n            },\n            velocityMap: 'VELOCITY_MAP',\n \t\t\tsoundMap: 'SOUND_MAP',\n            startMap: 'START_MAP',\n            tpf: 0\n        },\n        vshader: [\n            'attribute vec3 vertexPosition;',\n            'attribute vec2 vertexUV0;',\n\n            'uniform mat4 viewProjectionMatrix;',\n            'uniform mat4 worldMatrix;',\n\n            'varying vec2 vUv;',\n\n            'void main() {',\n            '    vUv = vertexUV0;',\n            '    gl_Position = viewProjectionMatrix * (worldMatrix * vec4( vertexPosition, 1.0 ));',\n            '}'\n        ].join('\\n'),\n        fshader: [\n            'uniform sampler2D positionMap;',\n            'uniform sampler2D velocityMap;',\n            'uniform sampler2D startMap;',\n \t\t\t'uniform sampler2D soundMap;',\n            'uniform mat4 objMat;',\n\n            'uniform float tpf;',\n\n            'varying vec2 vUv;',\n\n            'void main() {',\n\t\t\t\t'vec4 sound = texture2D(soundMap, vUv);',\n\t\t\t\t\n                'vec4 pos = texture2D( positionMap, vUv );',\n                'if (pos.w < 0.0) {',\n                    'pos = texture2D( startMap, vUv );',\n                    'pos.xyz = (objMat * vec4(pos.xyz, 1.0)).xyz;',\n                '}',\n                'vec4 vel = texture2D( velocityMap, vUv );',\n                'vec3 newpos = pos.xyz;',\n//  \t\t\t'newpos += sound.xyz*0.1;',\n\n                'gl_FragColor = vec4(newpos + vel.xyz * (0.01+sound.xyz*2.0)*(1.0+tpf) , pos.w-tpf/3.0 );',\n            '}'\n        ].join('\\n')\n    };\n}\n\nfunction getParticleUpdateVelocityShader() {\n    return {\n        attributes: {\n            vertexPosition: goo.MeshData.POSITION,\n            vertexUV0: goo.MeshData.TEXCOORD0\n        },\n        uniforms: {\n            viewProjectionMatrix: goo.Shader.VIEW_PROJECTION_MATRIX,\n            worldMatrix: goo.Shader.WORLD_MATRIX,\n            velocityMap: goo.Shader.DIFFUSE_MAP,\n            startMap: 'START_MAP',\n            posMap: 'POS_MAP',\n            tpf: 0,\n            normalMat: function (shaderInfo) {\n                return currentEntity.transformComponent.worldTransform.normalMatrix.data;\n            },\n            dampingFactor: 0.85,\n            gravityFactor: 0.8,\n            time: goo.Shader.TIME\n        },\n        vshader: [\n            'attribute vec3 vertexPosition;',\n            'attribute vec2 vertexUV0;',\n\n            'uniform mat4 viewProjectionMatrix;',\n            'uniform mat4 worldMatrix;',\n\n            'varying vec2 vUv;',\n\n            'void main() {',\n            '    vUv = vertexUV0;',\n            '    gl_Position = viewProjectionMatrix * (worldMatrix * vec4( vertexPosition, 1.0 ));',\n            '}'\n        ].join('\\n'),\n        fshader: [\n            'uniform sampler2D velocityMap;',\n\t\t\t'uniform sampler2D soundMap;',\n            'uniform sampler2D startMap;',\n            'uniform sampler2D posMap;',\n            'uniform float time;',\n            'uniform float tpf;',\n            'uniform float dampingFactor;',\n            'uniform float gravityFactor;',\n            'uniform mat3 normalMat;',\n\n            'varying vec2 vUv;',\n\n            goo.ShaderFragment.noise3d,\n\n            'void main() {',\n                'vec4 vel = texture2D( velocityMap, vUv );',\n\t\t\t\t\n                'if (vel.w < 0.0) {',\n                    'vel = texture2D( startMap, vUv );',\n                    'float l = length(vel.xyz);',\n                    'vel.xyz = normalize(normalMat * vel.xyz) * l;',\n                '} else {',\n                    'vec4 pos = texture2D( posMap, vUv );',\n\n                    'float tt = floor(time * 0.5);',\n                    'vec3 q = pos.xyz * 0.6;',\n                    'float x = snoise(q + vec3(0.0, time * 0.5, 0.0));',\n                    'float y = snoise(q + vec3(100.0 + time * 0.25, 0.0, 0.0));',\n                    'float z = snoise(q + vec3(0.0, 100.0, -time * 0.5));',\n                    'float l = length(vel.xyz);',\n                    'vel.xyz += vec3(x, y, z) * 2.0 * tpf;',\n                    'vel.xyz = normalize(vel.xyz) * l;',\n                '}',\n\n                'gl_FragColor = vec4(vel.xyz * vec3(1.0 - tpf * dampingFactor) - vec3(0.0, tpf*gravityFactor, 0.0), vel.w - tpf);',\n            '}'\n        ].join('\\n')\n    };\n}\n\nvar setup = function(args, ctx, goo) {\n\tctx.w = 8;\n    ctx.h = 8;\n\t\n\tctx.freqs = 1;\n\tctx.deform = 1;\n\t\n\tctx.colorInfo = new Uint8Array(ctx.w * ctx.h * 4);\n    ctx.tex = new goo.Texture(ctx.colorInfo, null, ctx.w, ctx.h);\n\t\n\t\n    currentEntity = args.entity || ctx.entity;\n\n    var gooRunner = ctx.world.gooRunner;\n    var sizeX = args.countX;\n    var sizeY = args.countY;\n\n    console.log(sizeX, sizeY, sizeX * sizeY);\n\n    var positionTarget1 = new goo.RenderTarget(sizeX, sizeY, {\n        type: 'Float',\n        magFilter: 'NearestNeighbor',\n        minFilter: 'NearestNeighborNoMipMaps'\n    });\n    var positionTarget2 = new goo.RenderTarget(sizeX, sizeY, {\n        type: 'Float',\n        magFilter: 'NearestNeighbor',\n        minFilter: 'NearestNeighborNoMipMaps'\n    });\n    var velocityTarget1 = new goo.RenderTarget(sizeX, sizeY, {\n        type: 'Float',\n        magFilter: 'NearestNeighbor',\n        minFilter: 'NearestNeighborNoMipMaps'\n    });\n    var velocityTarget2 = new goo.RenderTarget(sizeX, sizeY, {\n        type: 'Float',\n        magFilter: 'NearestNeighbor',\n        minFilter: 'NearestNeighborNoMipMaps'\n    });\n\n    var positionInfo = new Float32Array(4 * sizeX * sizeY);\n    var velocityInfo = new Float32Array(4 * sizeX * sizeY);\n\n    var meshData = currentEntity.meshDataComponent.meshData;\n\n    var positionStore = new goo.Vector3();\n    var normalStore = new goo.Vector3();\n    var exitVariation = args.exitVariation;\n    var lifeTimeMin = args.lifeTimeMin;\n    var lifeTimeMax = args.lifeTimeMax;\n    var lifeTimeDiff = lifeTimeMax - lifeTimeMin;\n    var forceDiff = args.forceMax - args.forceMin;\n    console.log(args.forceMin, args.forceMax);\n    for (var x = 0; x < sizeX; x++) {\n        for (var y = 0; y < sizeY; y++) {\n            var i = y * sizeX + x;\n\n            var lifeTime = Math.random() * lifeTimeDiff + lifeTimeMin;\n\n            //position\n            getRandomSurfacePosition(meshData, positionStore, normalStore);\n            // transform.applyForward(positionStore, positionStore);\n            positionInfo[i * 4 + 0] = positionStore.x;\n            positionInfo[i * 4 + 1] = positionStore.y;\n            positionInfo[i * 4 + 2] = positionStore.z;\n\n            //lifetime\n            positionInfo[i * 4 + 3] = lifeTime;\n\n            var velocityVariation = Math.random() * forceDiff + args.forceMin;\n            velocityInfo[i * 4 + 0] = normalStore.x * velocityVariation;\n            velocityInfo[i * 4 + 1] = normalStore.y * velocityVariation;\n            velocityInfo[i * 4 + 2] = normalStore.z * velocityVariation;\n\n            //lifetime\n            velocityInfo[i * 4 + 3] = lifeTime;\n        }\n    }\n\n    var positionTexture = new goo.Texture(positionInfo, {\n        type: 'Float',\n        minFilter: 'NearestNeighborNoMipMaps',\n        magFilter: 'NearestNeighbor',\n    }, sizeX, sizeY);\n    positionTexture.format = 'RGBA';\n    positionTexture.generateMipmaps = false;\n\n    var velocityTexture = new goo.Texture(velocityInfo, {\n        type: 'Float',\n        minFilter: 'NearestNeighborNoMipMaps',\n        magFilter: 'NearestNeighbor',\n    }, sizeX, sizeY);\n    velocityTexture.format = 'RGBA';\n    velocityTexture.generateMipmaps = false;\n\n    positionInfo = positionInfo.slice();\n    velocityInfo = velocityInfo.slice();\n    for (var x = 0; x < sizeX; x++) {\n        for (var y = 0; y < sizeY; y++) {\n            var i = y * sizeX + x;\n            positionInfo[i * 4 + 3] = -1;\n            velocityInfo[i * 4 + 3] = -1;\n        }\n    }\n\n    var startPositionTexture = new goo.Texture(positionInfo, {\n        type: 'Float',\n        minFilter: 'NearestNeighborNoMipMaps',\n        magFilter: 'NearestNeighbor',\n    }, sizeX, sizeY);\n    startPositionTexture.format = 'RGBA';\n    startPositionTexture.generateMipmaps = false;\n\n    var startVelocityTexture = new goo.Texture(velocityInfo, {\n        type: 'Float',\n        minFilter: 'NearestNeighborNoMipMaps',\n        magFilter: 'NearestNeighbor',\n    }, sizeX, sizeY);\n    startVelocityTexture.format = 'RGBA';\n    startVelocityTexture.generateMipmaps = false;\n\n    var particleUpdateMaterial = new goo.Material(getParticleUpdateShader());\n    var particleUpdateVelocityMaterial = new goo.Material(getParticleUpdateVelocityShader());\n\n    var sourcePosition = startPositionTexture;\n    var targetPosition = positionTarget2;\n\n    var sourceVelocity = startVelocityTexture;\n    var targetVelocity = velocityTarget2;\n\n    var renderable = {\n        meshData: goo.FullscreenUtils.quad,\n        materials: [],\n        transform: new goo.Transform()\n    };\n\n    var particleEntity = ctx.entityData.particleEntity = createParticleEntity(gooRunner.world, sizeX, sizeY);\n    particleEntity.meshRendererComponent.cullMode = 'Never';\n    if (args.mode === 'Add') {\n        particleEntity.meshRendererComponent.materials[0].depthState.write = false;\n        particleEntity.meshRendererComponent.materials[0].blendState.blending = 'AdditiveBlending';\n    } else if (args.mode === 'Replace') {\n        particleEntity.meshRendererComponent.materials[0].blendState.blending = 'CustomBlending';\n\t\t particleEntity.meshRendererComponent.materials[0].depthState.write = false;\n\t\t particleEntity.meshRendererComponent.materials[0].renderQueue = goo.RenderQueue.TRANSPARENT;\n    }\n    //particleEntity.meshRendererComponent.materials[0].depthState.enabled = false;\n    particleEntity.meshRendererComponent.materials[0].renderQueue = 4000;\n    particleEntity.meshRendererComponent.materials[0].uniforms.pointSize = args.particleSize;\n    particleEntity.meshRendererComponent.materials[0].uniforms.particleColor = args.particleColor;\n    particleEntity.meshRendererComponent.materials[0].uniforms.ambientColor = args.ambientColor;\n    var first = true;\n\n    var particleTexture = args.texture || goo.TextureCreator.DEFAULT_TEXTURE_2D;\n\n    particleUpdateVelocityMaterial.uniforms.dampingFactor = args.dampingFactor;\n    particleUpdateVelocityMaterial.uniforms.gravityFactor = args.gravityFactor;\n\n    var FIXED_TPF = 1 / 60;\n    var counter = 0;\n    ctx.entityData.callback = function (tpf) {\n        var viewMatrix = goo.Renderer.mainCamera.getViewMatrix();\n        var viewProjectionMatrix = goo.Renderer.mainCamera.getViewProjectionMatrix();\n\n        tpf = Math.min(tpf, 1/10);\n        counter += tpf;\n        while (counter >= FIXED_TPF) {\n            counter -= FIXED_TPF;\n\n            renderable.materials[0] = particleUpdateVelocityMaterial;\n            particleUpdateVelocityMaterial.setTexture('DIFFUSE_MAP', sourceVelocity);\n            particleUpdateVelocityMaterial.setTexture('START_MAP', velocityTexture);\n            particleUpdateVelocityMaterial.setTexture('POS_MAP', sourcePosition);\n            particleUpdateVelocityMaterial.uniforms.tpf = FIXED_TPF;\n            gooRunner.renderer.render(renderable, goo.FullscreenUtils.camera, [], targetVelocity, true);\n\n            renderable.materials[0] = particleUpdateMaterial;\n            particleUpdateMaterial.setTexture('DIFFUSE_MAP', sourcePosition);\n            particleUpdateMaterial.setTexture('START_MAP', positionTexture);\n            particleUpdateMaterial.setTexture('VELOCITY_MAP', targetVelocity);\n            particleUpdateMaterial.uniforms.tpf = FIXED_TPF;\n            gooRunner.renderer.render(renderable, goo.FullscreenUtils.camera, [], targetPosition, true);\n\n            if (first) {\n                sourcePosition = positionTarget1;\n                sourceVelocity = velocityTarget1;\n                first = false;\n            }\n\n            var tmp = targetVelocity;\n            targetVelocity = sourceVelocity;\n            sourceVelocity = tmp;\n\n            tmp = targetPosition;\n            targetPosition = sourcePosition;\n            sourcePosition = tmp;\n        }\n\n        particleEntity.meshRendererComponent.materials[0].setTexture('DIFFUSE_MAP', targetPosition);\n        particleEntity.meshRendererComponent.materials[0].setTexture('PARTICLE_MAP', particleTexture);\n\t\tparticleUpdateMaterial.setTexture('SOUND_MAP', ctx.tex);\n    };\n\n    var warmupCount = args.warmup;\n    var warmupTpf = 1 / 60;\n    for (var i = 0; i < warmupCount; i++) {\n        ctx.entityData.callback(warmupTpf);\n    }\n    gooRunner.callbacksPreRender.push(ctx.entityData.callback);\n};\n\nvar triangleVerts = [];\nvar triangleNormals = [];\nvar getRandomSurfacePosition = function(meshData, positionStore, normalStore) {\n    if (meshData.primitiveCounts[0] === 0) {\n        meshData.updatePrimitiveCounts();\n    }\n\n    var sectionCount = meshData.getSectionCount();\n    var sectionIndex = Math.floor(Math.random() * sectionCount);\n\n    var primitiveCount = meshData.getPrimitiveCount(sectionIndex);\n    var primitiveIndex = Math.floor(Math.random() * primitiveCount);\n\n    if (normalStore) {\n        getPrimitiveVertices(meshData, primitiveIndex, sectionIndex, triangleVerts, triangleNormals);\n    } else {\n        getPrimitiveVertices(meshData, primitiveIndex, sectionIndex, triangleVerts);\n    }\n\n    var r1 = Math.sqrt(Math.random());\n    var r2 = Math.random();\n\n    positionStore.setVector(triangleVerts[0].scale(1 - r1));\n    positionStore.addVector(triangleVerts[1].scale(r1 * (1 - r2)));\n    positionStore.addVector(triangleVerts[2].scale(r1 * r2));\n\n    if (normalStore) {\n        normalStore.setVector(triangleNormals[0].scale(1 - r1));\n        normalStore.addVector(triangleNormals[1].scale(r1 * (1 - r2)));\n        normalStore.addVector(triangleNormals[2].scale(r1 * r2));\n    }\n\n    return positionStore;\n};\n\nvar getPrimitiveVertices = function(meshData, primitiveIndex, section, positionStore, normalStore) {\n    var count = meshData.getPrimitiveCount(section);\n    if (primitiveIndex >= count || primitiveIndex < 0) {\n        throw new Error(\"Invalid primitiveIndex '\" + primitiveIndex + \"'.  Count is \" + count);\n    }\n\n    var mode = meshData.indexModes[section];\n    var rSize = goo.MeshData.getVertexCount(mode);\n    var result = positionStore || [];\n    result.length = rSize;\n\n    var verts = meshData.getAttributeBuffer(goo.MeshData.POSITION);\n    var normals = meshData.getAttributeBuffer(goo.MeshData.NORMAL);\n    if (!normals) {\n        normalStore = null;\n    }\n\n    var vert = 0;\n    for (var i = 0; i < rSize; i++) {\n        if (!result[i]) {\n            result[i] = new goo.Vector3();\n        }\n        if (normalStore && !normalStore[i]) {\n            normalStore[i] = new goo.Vector3();\n        }\n\n        if (meshData.getIndexBuffer()) {\n            // indexed geometry\n            vert = meshData.getIndexBuffer()[meshData.getVertexIndex(primitiveIndex, i, section)];\n        } else {\n            // non-indexed geometry\n            vert = meshData.getVertexIndex(primitiveIndex, i, section);\n        }\n\n        result[i].x = verts[vert * 3 + 0];\n        result[i].y = verts[vert * 3 + 1];\n        result[i].z = verts[vert * 3 + 2];\n        if (normalStore) {\n            normalStore[i].x = normals[vert * 3 + 0];\n            normalStore[i].y = normals[vert * 3 + 1];\n            normalStore[i].z = normals[vert * 3 + 2];\n        }\n    }\n\n    return result;\n};", "name": "particles 2", "license": "CC0", "created": "2015-12-18T12:07:57.915Z", "deleted": false, "dataModelVersion": 2, "modified": "2015-12-18T12:07:57.915Z", "id": "6fa77c44acd54927a35c31d794f6a0f8.script"}, "30d936dab88a49eabb3545fc798624ce.material": {"texturesMapping": {}, "flat": false, "cullState": {"frontFace": "CCW", "enabled": true, "cullFace": "Back"}, "uniforms": {"opacity": {"enabled": false, "value": 1}, "refractivity": {"enabled": false, "value": 0}, "materialAmbient": {"enabled": true, "value": [0.1, 0.1, 0.1, 1]}, "materialSpecular": {"enabled": true, "value": [0.6, 0.6, 0.6, 1]}, "fresnel": {"enabled": true, "value": 0.5}, "vertexColorAmount": {"enabled": true, "value": 1}, "materialSpecularPower": {"enabled": true, "value": 64}, "materialDiffuse": {"enabled": true, "value": [0.8, 0.8, 0.8, 1]}, "reflectivity": {"enabled": true, "value": 0.6}, "materialEmissive": {"enabled": true, "value": [0, 0, 0, 1]}, "discardThreshold": {"enabled": true, "value": 0.1}, "normalMultiplier": {"enabled": true, "value": 1}, "etaRatio": {"enabled": true, "value": -0.5}, "reflectionType": 0, "wrapSettings": {"enabled": true, "value": [0, 0]}}, "name": "Default Material 7", "license": "CC0", "created": "2015-12-14T17:01:11.992Z", "deleted": false, "wireframe": false, "dataModelVersion": 2, "blendState": {"blendEquation": "AddEquation", "blendSrc": "SrcAlphaFactor", "blendDst": "OneMinusSrcAlphaFactor", "blending": "NoBlending"}, "modified": "2015-12-14T17:01:11.992Z", "dualTransparency": false, "depthState": {"write": true, "enabled": true}, "shaderRef": "GOO_ENGINE_SHADERS/uber", "id": "30d936dab88a49eabb3545fc798624ce.material", "renderQueue": -1}, "b329ac0ef5a34ba183e53d5cd9f7d360.posteffects": {"name": "Post effects", "license": "CC0", "created": "2015-07-27T15:45:29.145Z", "deleted": false, "modified": "2015-07-27T15:45:29.145Z", "dataModelVersion": 2, "posteffects": {}, "id": "b329ac0ef5a34ba183e53d5cd9f7d360.posteffects"}, "2b165beedb9d4671ba00a405a3d547c2.entity": {"name": "Default Lights", "license": "CC0", "tags": {}, "deleted": false, "created": "2015-07-27T15:45:29.194Z", "dataModelVersion": 2, "modified": "2015-07-27T15:45:29.194Z", "static": false, "components": {"transform": {"translation": [0, 0, 0], "scale": [1, 1, 1], "rotation": [0, 0, 0], "children": {"7d9850c0e45141c0b26b8b87af2a51bf.entity": {"entityRef": "7d9850c0e45141c0b26b8b87af2a51bf.entity", "sortValue": 1}, "363811579ab14c75960c7bed0e5511c6.entity": {"entityRef": "363811579ab14c75960c7bed0e5511c6.entity", "sortValue": 0}}}}, "hidden": false, "id": "2b165beedb9d4671ba00a405a3d547c2.entity"}}