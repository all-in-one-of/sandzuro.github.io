{"92aca09436674360863731d38f23827a.material": {"texturesMapping": {}, "flat": false, "cullState": {"frontFace": "CCW", "enabled": true, "cullFace": "Back"}, "uniforms": {"opacity": {"enabled": false, "value": 1}, "refractivity": {"enabled": false, "value": 0}, "materialAmbient": {"enabled": true, "value": [0.1, 0.1, 0.1, 1]}, "materialSpecular": {"enabled": true, "value": [0.6, 0.6, 0.6, 1]}, "fresnel": {"enabled": true, "value": 0.5}, "vertexColorAmount": {"enabled": true, "value": 1}, "materialSpecularPower": {"enabled": true, "value": 64}, "materialDiffuse": {"enabled": true, "value": [0.8, 0.8, 0.8, 1]}, "reflectivity": {"enabled": true, "value": 0.6}, "materialEmissive": {"enabled": true, "value": [0, 0, 0, 1]}, "discardThreshold": {"enabled": true, "value": 0.1}, "normalMultiplier": {"enabled": true, "value": 1}, "etaRatio": {"enabled": true, "value": -0.5}, "reflectionType": 0, "wrapSettings": {"enabled": true, "value": [0, 0]}}, "name": "Default Material 2", "license": "CC0", "created": "2016-02-22T14:26:02.844Z", "deleted": false, "wireframe": false, "dataModelVersion": 2, "blendState": {"blendEquation": "AddEquation", "blendSrc": "SrcAlphaFactor", "blendDst": "OneMinusSrcAlphaFactor", "blending": "NoBlending"}, "modified": "2016-02-22T14:26:02.844Z", "dualTransparency": false, "depthState": {"write": true, "enabled": true}, "shaderRef": "GOO_ENGINE_SHADERS/uber", "id": "92aca09436674360863731d38f23827a.material", "renderQueue": -1}, "4d2303a5ad484fea930530132d84ff03.entity": {"name": "Sphere", "license": "CC0", "tags": {}, "deleted": false, "created": "2016-02-26T15:46:13.823Z", "dataModelVersion": 2, "modified": "2016-02-26T15:46:13.823Z", "static": false, "components": {"meshData": {"shape": "Sphere", "shapeOptions": {"radialSamples": 24, "textureMode": "Projected", "radius": 0.5, "zSamples": 16}}, "transform": {"rotation": [0, 0, 0], "scale": [1, 1, 1], "translation": [0, 0, 0]}, "meshRenderer": {"receiveShadows": true, "materials": {"4cfc09f9b76a4f4cad4a6032cdf0744a.material": {"materialRef": "4cfc09f9b76a4f4cad4a6032cdf0744a.material", "sortValue": 0}}, "reflectable": true, "cullMode": "Dynamic", "castShadows": true}, "script": {"scripts": {"1d99cc5178db4c6abb9907cdac38c730.scriptinstance": {"id": "1d99cc5178db4c6abb9907cdac38c730.scriptinstance", "name": "Instance of Stream video script", "scriptRef": "f262bb7418044b34ae6100230b7988c4.script", "sortValue": 0, "options": {"enabled": true, "videoTexture": {"enabled": true, "textureRef": "679f7c69547246e5a03cf501af127572.texture"}, "videoUrl": ""}}}}}, "hidden": false, "id": "4d2303a5ad484fea930530132d84ff03.entity"}, "ebc5ac6898234f0d8eb1e629b2a7d6c4.entity": {"name": "Default Camera", "license": "CC0", "tags": {}, "deleted": false, "created": "2015-07-27T15:45:29.148Z", "dataModelVersion": 2, "modified": "2015-07-27T15:45:29.148Z", "static": false, "components": {"camera": {"fov": 45, "lockedRatio": false, "far": 1000, "followEditorCam": false, "projectionMode": "Perspective", "near": 1, "aspect": 1, "size": 5}, "transform": {"rotation": [0, 0, 0], "scale": [1, 1, 1], "translation": [0, 0, 0]}, "script": {"scripts": {"83a93026ad294009a907e314e461eed3.scriptInstance": {"scriptRef": "GOO_ENGINE_SCRIPTS/OrbitNPanControlScript", "options": {"maxAscent": 89.95, "whenUsed": true, "orbitSpeed": 0.005, "clampAzimuth": false, "maxAzimuth": 270, "minZoomDistance": 1, "enabled": true, "minAzimuth": 90, "minAscent": -89, "lookAtDistance": 1, "drag": 0.9, "dragButton": "Left", "panButton": "Right", "zoomSpeed": 1, "smoothness": 0.4, "maxZoomDistance": 1000}, "id": "83a93026ad294009a907e314e461eed3.scriptInstance", "sortValue": 0, "name": "OrbitNPan"}}}}, "hidden": false, "id": "ebc5ac6898234f0d8eb1e629b2a7d6c4.entity"}, "cb3463698ada4635aaf75f1001f6233a.environment": {"sound": {"dopplerFactor": 0, "maxDistance": 100, "reverb": 0, "rolloffFactor": 0.4, "volume": 1}, "globalAmbient": [0, 0, 0, 0], "license": "CC0", "created": "2015-07-27T15:45:29.143Z", "deleted": false, "dataModelVersion": 2, "modified": "2015-07-27T15:45:29.143Z", "fog": {"color": [1, 1, 1], "far": 996, "near": 0, "enabled": false}, "backgroundColor": [0, 0, 0, 1], "weather": {"snow": {"velocity": 10, "rate": 10, "enabled": false, "height": 25}}, "id": "cb3463698ada4635aaf75f1001f6233a.environment", "name": "Default Environment"}, "28de9dae45fa4a43afd7989f5cae6098.posteffects": {"name": "Post effects", "license": "CC0", "created": "2015-07-27T15:45:29.145Z", "deleted": false, "dataModelVersion": 2, "posteffects": {}, "modified": "2015-07-27T15:45:29.145Z", "id": "28de9dae45fa4a43afd7989f5cae6098.posteffects"}, "647ce9e6c5a74e879740fbd519c2be00.entity": {"name": "sky", "license": "CC0", "tags": {}, "deleted": false, "created": "2016-02-24T09:27:23.859Z", "dataModelVersion": 2, "modified": "2016-02-24T09:27:23.859Z", "static": false, "components": {"transform": {"rotation": [0, 0, 0], "scale": [1, 1, 1], "translation": [0, 0, 0]}, "script": {"scripts": {"4dc237d4d0ec4d499492091e2228cec0.scriptinstance": {"id": "4dc237d4d0ec4d499492091e2228cec0.scriptinstance", "name": "Instance of video_loader", "scriptRef": "107c4dcd5e1c48e1989dd9086aafed2a.script", "sortValue": 0, "options": {"texture2": {"enabled": true}, "texture1": {"enabled": true, "textureRef": "679f7c69547246e5a03cf501af127572.texture"}, "enabled": false, "listenToStop": "stop", "listenToStart": "start"}}}}}, "hidden": false, "id": "647ce9e6c5a74e879740fbd519c2be00.entity"}, "843d5c34d3e6452fa3b44517b4b1488e.entity": {"name": "Directional 0", "license": "CC0", "tags": {}, "deleted": false, "created": "2015-07-27T15:45:29.196Z", "dataModelVersion": 2, "modified": "2015-07-27T15:45:29.196Z", "static": false, "components": {"light": {"direction": [0, 0, 0], "shadowCaster": false, "color": [1, 1, 1, 1], "intensity": 0.8, "range": 60, "specularIntensity": 1, "penumbra": 5, "angle": 30, "type": "DirectionalLight", "shadowSettings": {"fov": 55, "darkness": 1, "far": 60, "near": 1, "resolution": [256, 256], "shadowType": "Basic", "size": 100}}, "transform": {"rotation": [-38, 21, -18], "scale": [1, 1, 1], "translation": [16, 20.5, 23.3]}}, "hidden": false, "id": "843d5c34d3e6452fa3b44517b4b1488e.entity"}, "fd90172063be40a2a5f15d903283c2de.entity": {"name": "Icosahedron_Faces", "license": "CC0", "created": "2016-02-24T09:25:51.001Z", "deleted": false, "tags": {}, "dataModelVersion": 2, "modified": "2016-02-24T09:25:51.001Z", "static": false, "components": {"meshData": {"meshRef": "df36ea7e12b44804bdeb1fe59c4fcdfb.mesh"}, "transform": {"rotation": [0, 0, 0], "scale": [1, 1, 1], "translation": [0, 0, 0]}, "meshRenderer": {"receiveShadows": true, "materials": {"218277c4b512410483a715adef343104.material": {"materialRef": "218277c4b512410483a715adef343104.material", "sortValue": 0}}, "reflectable": true, "cullMode": "Dynamic", "castShadows": true}, "script": {"scripts": {}}}, "hidden": false, "id": "fd90172063be40a2a5f15d903283c2de.entity"}, "5b4dfffaae2a464987abe43bcffdb85a.texture": {"wrapS": "Repeat", "minFilter": "Trilinear", "imageRef": "f8000ef131feb90de6615b326ccf026e8120856c.jpg", "license": "CC0", "flipY": true, "deleted": false, "name": "Icosahedron_Color", "magFilter": "Bilinear", "created": "2015-06-25T08:56:06.009253+00:00", "dataModelVersion": 2, "modified": "2015-06-25T08:56:23.674090+00:00", "matchFileName": "Icosahedron_Color.jpg", "repeat": [1, 1], "offset": [0, 0], "id": "5b4dfffaae2a464987abe43bcffdb85a.texture", "generateMipmaps": true, "anisotropy": 1, "wrapT": "Repeat"}, "679f7c69547246e5a03cf501af127572.texture": {"wrapS": "Repeat", "minFilter": "Trilinear", "name": "videoplayback.mp4_2.mp4", "license": "CC0", "flipY": true, "deleted": false, "magFilter": "Bilinear", "created": "2016-02-24T12:58:55.972Z", "dataModelVersion": 2, "modified": "2016-02-24T12:58:55.972Z", "repeat": [1, 1], "imageRef": "5ce1b4e74a02b3b14199038b3880a2640f2a549c.mp4", "anisotropy": 1, "offset": [0, 0], "generateMipmaps": true, "id": "679f7c69547246e5a03cf501af127572.texture", "wrapT": "Repeat"}, "763dc89e7b4649bea068cff5bd7797e4.entity": {"name": "VRDescription", "license": "CC0", "tags": {}, "deleted": false, "created": "2016-02-24T09:01:44.626Z", "dataModelVersion": 2, "modified": "2016-02-24T09:01:44.626Z", "static": false, "components": {"html": {"imageRefs": {}, "useTransformComponent": true, "innerHtml": "<div style=\"width:200px;\">\n<p style=\"font-size:12px;padding:4px;margin:0;border-radius:3px; font-family:roboto, helvetica, sans-serif; color:white\">\n\t<b>VR CAMERA<hr style=\"margin-left:4px; width:180px\"></b><p style=\"font-size:12px;padding:4px;margin:0;border-radius:3px; font-family:roboto, helvetica, sans-serif; color:white\">\n\tThe VR Camera consists of three different scripts working together as one. Open up the Scripts tab to view the settings. <br><br>\n\tVR Render Script is the renderer, dividing the screen in two segments that are essential for a VR experience. The \"Boost 3D Effect\" slider decides the distance between the \"eyes\". In general, upping the number gives a more accentuated 3D experience.<br><br>The Device Orientation script controls the camera movement. It taps in on the gyroscope of your mobile. If you uncheck the Absolute checkbox, the camera position will adjust to your device's starting position. The Lerp controls how smoothly the camera will follow your gyro, with 1 being the camera following your movements very precise.<br><br>Full Screen gets rid of the browser interface, which could otherwise distract or in some cases destroy the VR experience.<br><br><b>Note:</b> don't forget to set the VR camera as the main camera, and have post effects on. To toggle the post effects on and off, click the wand icon above the Create viewport, or press 3 on your keyboard.<br><br>To hide this message, please expand the VR Camera entity in the hierarchy, and press the eye icon next to \"VRDescription\".\n\t\n\t\n</p>\n</div>"}, "transform": {"rotation": [0, 0, 0], "scale": [1, 1, 1], "translation": [-0.8148342370986938, 0.28002703189849854, 0]}}, "hidden": true, "id": "763dc89e7b4649bea068cff5bd7797e4.entity"}, "64f47c2064f746999a6db20581dbfb40.entity": {"name": "VR Camera", "license": "CC0", "tags": {}, "deleted": false, "created": "2016-02-24T09:01:44.620Z", "dataModelVersion": 2, "originalAsset": {"version": "3557785339bf43edb490080807e0b2f8", "id": "35a0371261c349a2adbeb3ca0fedaf00"}, "modified": "2016-02-24T09:01:44.620Z", "static": false, "components": {"camera": {"fov": 55, "lockedRatio": false, "far": 1000, "followEditorCam": false, "projectionMode": "Perspective", "near": 0.1, "aspect": 1, "size": 5}, "transform": {"rotation": [0, 0, 0], "scale": [1, 1, 1], "translation": [0, 0, 1], "children": {"763dc89e7b4649bea068cff5bd7797e4.entity": {"entityRef": "763dc89e7b4649bea068cff5bd7797e4.entity", "sortValue": 0}}}, "script": {"scripts": {"7b1fc90a87914e22a7d57f7ce4247f6c.scriptinstance": {"id": "7b1fc90a87914e22a7d57f7ce4247f6c.scriptinstance", "name": "Custom script", "scriptRef": "f758d1b3cb4f4a43b36de389c39550d0.script", "sortValue": 2, "options": {"enabled": true}}, "300b1bd8dc9547f3b681284a9329ccf9.scriptinstance": {"id": "300b1bd8dc9547f3b681284a9329ccf9.scriptinstance", "name": "Custom script", "scriptRef": "b88ee439142b4ba5b918fdc3fd3cc83d.script", "sortValue": 0, "options": {"boost3D": 2, "enabled": true}}, "10762fa628c54f7297f19963b877286a.scriptinstance": {"id": "10762fa628c54f7297f19963b877286a.scriptinstance", "name": "Custom script", "scriptRef": "3796306a58c24ed9936146e0002a720a.script", "sortValue": 1, "options": {"absolute": false, "enabled": true, "lerp": 0.5}}, "5609a7dbb0604b0589ff75b848384f2e.scriptinstance": {"scriptRef": "GOO_ENGINE_SCRIPTS/MouseLookScript", "name": "Instance of 'MouseLookScript'", "id": "5609a7dbb0604b0589ff75b848384f2e.scriptinstance", "sortValue": 3, "options": {"maxAscent": 89.95, "clampAzimuth": false, "maxAzimuth": 90, "button": "Left", "whenUsed": true, "enabled": true, "minAzimuth": -90, "minAscent": -89.95, "speed": 1}}}}}, "hidden": false, "id": "64f47c2064f746999a6db20581dbfb40.entity"}, "107c4dcd5e1c48e1989dd9086aafed2a.script": {"body": "'use strict';\n\n/* global goo */\n\nvar clamp = function(number, min, max) {\n  return Math.max(min, Math.min(number, max));\n};\n\nvar mouseMove = function(ctx, x, y) {\n\tctx.relative[0] = (x - ctx.rect.width/2.0);\n\tctx.relative[1] = (y - ctx.rect.height/2.0);\n\t// ctx.worldData.relative = ctx.relative;\n};\n\nvar setup = function (args, ctx) {\n\t\n\tctx.rect = ctx.domElement.getBoundingClientRect();\n\tgoo.SystemBus.addListener('goo.viewportResize', function() {\n\t\tctx.rect = ctx.domElement.getBoundingClientRect();\n\t});\n\tctx.relative = [0, 0];\n\tctx.relativeSmooth = [0, 0];\n\tctx.windowListeners = {\n\t\tmousemove: function(evt) {\n\t\tmouseMove(ctx, evt.clientX, evt.clientY);\n\t\t}\n\t};\n\tObject.keys(ctx.windowListeners).forEach(function(v) {\n\twindow.addEventListener(v, ctx.windowListeners[v]);\n\t});\n\t\n\t\n    goo.Ajax.crossOrigin = true;\n    \n    function createSkySphere(ctx, material) {\n        material.cullState.cullFace = 'Front'; // cull the outside, keep the inside\n        material.depthState.enabled = false; // don't change the z-buffer\n        material.renderQueue = -1000; // draw this first\n        var skysphere = ctx.world.createEntity(new goo.Sphere(32, 32, 20, goo.Sphere.TextureModes.Linear), material);\n        skysphere.isSkybox = true; // activate special handling in renderer and for shadows\n        return skysphere;\n    }\n    \n        ctx.material = new goo.Material(goo.ShaderLib.textured);\n        ctx.material.setTexture('DIFFUSE_MAP', args.texture1);\n        ctx.skySphere = createSkySphere(ctx, ctx.material);\n        ctx.skySphere.addToWorld();\n        ctx.skySphere.setRotation(-Math.PI*0.5, 0, 0);\n\t\tctx.video = ctx.material.getTexture('DIFFUSE_MAP').image;\n};\n\nvar cleanup = function (args, ctx) {\n    if(ctx.skySphere !== undefined){\n        ctx.skySphere.removeFromWorld();\n    }\n\tObject.keys(ctx.windowListeners).forEach(function(v) {\n\twindow.removeEventListener(v, ctx.windowListeners[v]);\n\t});\n\t\n};\n\nvar update = function (args, ctx) {\n\tctx.skySphere.setTranslation(0,Math.sin(goo.World.time*10),0);\n\tif(ctx.relative[1]!==0) {\n\t\tctx.video.playbackRate = clamp(Math.abs(Math.floor(ctx.relative[1]/10)/10),0,2);\n\t  }\n\t\tconsole.log(ctx.video.playbackRate);\n\n};\n\nvar parameters = [\n        {key:'listenToStart', name: 'listenToVideo1', type: 'string', default: 'start'},\n        {key:'listenToStop', name: 'listenToVideo2', type: 'string', default: 'stop'},\n        {key:'texture1', type:'texture', default:null},\n        {key:'texture2', type:'texture', default:null},\n    ];", "name": "video_loader", "license": "CC0", "created": "2016-02-22T12:41:57.196Z", "deleted": false, "dataModelVersion": 2, "modified": "2016-02-22T12:41:57.196Z", "id": "107c4dcd5e1c48e1989dd9086aafed2a.script"}, "49f8edb7fcc0471e964c33ad54196e20.scene": {"canvas": {"resolution": {"width": 1920, "height": 1080}, "mode": "Stretch"}, "initialCameraRef": "64f47c2064f746999a6db20581dbfb40.entity", "name": "video_test3", "license": "PRIVATE", "created": "2016-02-26T15:47:10.165690+00:00", "deleted": false, "packs": {"2739083de95c4dc5addb4e43fc558dd0.pack": {"packRef": "2739083de95c4dc5addb4e43fc558dd0.pack", "sortValue": 1}, "c5e2899d97ad42ec9b13cd16806d1f8d.pack": {"packRef": "c5e2899d97ad42ec9b13cd16806d1f8d.pack", "sortValue": 2}, "438f67eaff1f4e8b91f97c3d3eeaf431.pack": {"packRef": "438f67eaff1f4e8b91f97c3d3eeaf431.pack", "sortValue": 0}, "56ac7215e0f64edba617e5b0c095b796.pack": {"packRef": "56ac7215e0f64edba617e5b0c095b796.pack", "sortValue": 3}, "7cc0eb88b0de4331b605d6677bde8ea9.pack": {"packRef": "7cc0eb88b0de4331b605d6677bde8ea9.pack", "sortValue": 4}}, "environmentRef": "cb3463698ada4635aaf75f1001f6233a.environment", "dataModelVersion": 2, "originalAsset": {"version": "e39b6ff680c4402a9949b27c96f1729a", "id": "ac9f46781def41a38e654aa43175edba"}, "modified": "2016-02-26T15:49:54.676866+00:00", "entities": {"4d2303a5ad484fea930530132d84ff03.entity": {"entityRef": "4d2303a5ad484fea930530132d84ff03.entity", "sortValue": 7}, "64f47c2064f746999a6db20581dbfb40.entity": {"entityRef": "64f47c2064f746999a6db20581dbfb40.entity", "sortValue": 4}, "ebc5ac6898234f0d8eb1e629b2a7d6c4.entity": {"entityRef": "ebc5ac6898234f0d8eb1e629b2a7d6c4.entity", "sortValue": 0}, "647ce9e6c5a74e879740fbd519c2be00.entity": {"entityRef": "647ce9e6c5a74e879740fbd519c2be00.entity", "sortValue": 6}, "5de059f428574f899590bffcf9725071.entity": {"entityRef": "5de059f428574f899590bffcf9725071.entity", "sortValue": 1}, "1357bc80a1434a92bd41040591f474f2.entity": {"entityRef": "1357bc80a1434a92bd41040591f474f2.entity", "sortValue": 3}, "d3d8a74a4a18453bb8bb9e0b92ec6d36.entity": {"entityRef": "d3d8a74a4a18453bb8bb9e0b92ec6d36.entity", "sortValue": 5}}, "posteffectsRef": "28de9dae45fa4a43afd7989f5cae6098.posteffects", "published": "2016-02-26T15:49:53.528147+00:00", "id": "49f8edb7fcc0471e964c33ad54196e20.scene", "defaultPackRef": "438f67eaff1f4e8b91f97c3d3eeaf431.pack", "thumbnailRef": "96340c1945837b5d1de89049d6215042682e71a1.png", "publishedUrl": "https://c1.goote.ch/49f8edb7fcc0471e964c33ad54196e20.scene"}, "c74e3e7e0a354362bb528f8a38d3dbff.entity": {"name": "Directional 1", "license": "CC0", "tags": {}, "deleted": false, "created": "2015-07-27T15:45:29.198Z", "dataModelVersion": 2, "modified": "2015-07-27T15:45:29.198Z", "static": false, "components": {"light": {"direction": [0, 0, 0], "shadowCaster": false, "color": [1, 1, 1, 1], "intensity": 0.4, "range": 60, "specularIntensity": 1, "penumbra": 5, "angle": 30, "type": "DirectionalLight", "shadowSettings": {"fov": 55, "darkness": 1, "far": 60, "near": 1, "resolution": [256, 256], "shadowType": "Basic", "size": 100}}, "transform": {"rotation": [-31, 129, 0], "scale": [1, 1, 1], "translation": [15, 11.6, -12.2]}}, "hidden": false, "id": "c74e3e7e0a354362bb528f8a38d3dbff.entity"}, "7be723f5741346ecb4a0c84a165b612d.entity": {"name": "Icosahedron_Cage", "license": "CC0", "created": "2016-02-24T09:25:51.001Z", "deleted": false, "tags": {}, "dataModelVersion": 2, "modified": "2016-02-24T09:25:51.001Z", "static": false, "components": {"transform": {"rotation": [0, 0, 0], "scale": [1, 1, 1], "translation": [0, 0, 0]}, "meshRenderer": {"receiveShadows": true, "materials": {"218277c4b512410483a715adef343104.material": {"materialRef": "218277c4b512410483a715adef343104.material", "sortValue": 0}}, "reflectable": true, "cullMode": "Dynamic", "castShadows": true}, "meshData": {"meshRef": "ec96f3bd35e943f4ab47b1c598579f78.mesh"}}, "hidden": false, "id": "7be723f5741346ecb4a0c84a165b612d.entity"}, "b88ee439142b4ba5b918fdc3fd3cc83d.script": {"body": "\nvar setup = function(args, ctx, goo) {\n\tctx.pass = new RiftRenderPass(args, ctx, goo);\n\tctx.enabled = false;\n\t\n\tvar fov = ctx.entity.cameraComponent ? ctx.entity.cameraComponent.camera.fov : 80;\n\t\n\tctx.pass.updateConfig({\n\t\tdistortionK: [1.0, 0.0,0.0,0],\n\t\tchromAbParameter: [1,0,1,0],\n\t\tlensSeparationDistance: 0.096,\n\t\thResolution: ctx.viewportWidth,\n\t\tvResolution: ctx.viewportHeight,\n\t\thScreenSize: 0.128,\n\t\tvScreenSize: 0.192,\n\t\tinterpupillaryDistance: 0.096,\n\t\tFOV: fov\n\t});\n};\n\nvar cleanup = function(args, ctx, goo) {\n\tif (ctx.enabled) {\n\t\tPassSwitcher.switchBack(ctx, goo);\n\t}\n};\n\nvar update = function (args, ctx, goo) {\n\tif (ctx.activeCameraEntity === ctx.entity && !ctx.enabled) {\n\t\tPassSwitcher.switchPass(ctx.pass, ctx, goo);\n\t\tctx.enabled = true;\n\t} else if (ctx.activeCameraEntity !== ctx.entity && ctx.enabled) {\n\t\tPassSwitcher.switchBack(ctx, goo);\n\t\tctx.enabled = false;\n\t}\n}\n\nvar parameters = [{\n\tkey: 'boost3D',\n\tname: 'Boost 3D Effect',\n\ttype: 'float',\n\tcontrol: 'slider',\n\t'default': 1,\n\tmin: 1,\n\tmax: 20\n}];\n\n'use strict';\n(function() {\n\tfunction RiftRenderPass(args, ctx, goo) {\n\t\tthis.goo = goo;\n\t\tthis.ctx = ctx;\n\t\t\n\t\tthis.camera = new goo.Camera();\n\t\tthis.fullscreenCamera = goo.FullscreenUtil.camera;\n\t\tthis.renderToScreen = false;\n\t\tthis.clear = true;\n\t\tthis.enabled = true;\n\t\tthis.needsSwap = true;\n\t\tthis.eyeOffset = 0.4;\n\t\tthis.fov = 100;\n\t\tthis.width = null;\n\t\tthis.height = null;\n\t\tthis._dc = 1.8; // Distortion compensation scale\n\n\t\t\n\t\t// Create composit\n\t\tthis.material = new goo.Material('Composit material', riftShader);\n\t\t\n\t\t// Create eye targets\n\t\tthis.updateSize({ width: ctx.viewportWidth, height: ctx.viewportHeight});\n\t\tthis.offsetVector = new goo.Vector3();\n\n\t\t\n\t\tthis.renderable = {\n\t\t\tmeshData: goo.FullscreenUtil.quad,\n\t\t\tmaterials: [this.material]\n\t\t};\n\n\t\t// get the renderlist\n\t\tthis.renderList = ctx.world.getSystem('RenderSystem').renderList;\n\t\tthis.setup(args, ctx, goo);\n\t}\n\t\n\tRiftRenderPass.prototype.setup = function(args) {\n\t\tthis.boost = args.boost3D || 1;\n\t};\n\tRiftRenderPass.prototype.destroy = function (renderer) {\n\t\tthis.leftTarget.destroy(renderer.context);\n\t\tthis.rightTarget.destroy(renderer.context);\n\t\tthis.leftTarget = null;\n\t\tthis.rightTarget = null;\n\t}\n\n\tRiftRenderPass.prototype.updateConfig = function (config) {\n\t\tvar uniforms = this.material.uniforms;\n\t\tuniforms.distortion = config.distortionK;\n\t\tuniforms.aberration = config.chromAbParameter;\n\t\tuniforms.lensCenterOffset = [\n\t\t\tconfig.lensSeparationDistance / config.hScreenSize - 0.5,\n\t\t\t0\n\t\t];\n\t\tthis.fov = config.FOV;\n\t\tthis.eyeOffset = config.interpupillaryDistance * this.boost;\n\n\n\t\tvar r = -1.0 - (4 * (config.hScreenSize/4 - config.lensSeparationDistance/2) / config.hScreenSize);\n\t\tvar distScale = (config.distortionK[0] +\n\t\t\tconfig.distortionK[1] * Math.pow(r,2) +\n\t\t\tconfig.distortionK[2] * Math.pow(r,4) +\n\t\t\tconfig.distortionK[3] * Math.pow(r,6));\n\t\tuniforms.scale = [\n\t\t\t1 / distScale,\n\t\t\t1 / distScale\n\t\t];\n\t\tthis.updateSize({ width: config.hResolution, height: config.vResolution })\n\t}\n\t\n\n\n\tRiftRenderPass.prototype.updateSize = function(size, renderer) {\n\t\tthis.material.uniforms.scaleIn = [\n\t\t\tsize.width * 0.5 / size.height,\n\t\t\t1\n\t\t];\n\t\tif (this.width === size.width && this.height === size.height) { return; }\n\t\tthis.width = size.width;\n\t\tthis.height = size.height;\n\t\tif (this.leftTarget) {\n\t\t\tthis.leftTarget.destroy(renderer.context)\n\t\t\tthis.rightTarget.destroy(renderer.context)\n\t\t}\n\t\t// size = { width: 2048, height: 2048 };\n\t\tthis.leftTarget = new this.goo.RenderTarget(size.width * 0.5 * this._dc, size.height * this._dc);\n\t\tthis.rightTarget = new this.goo.RenderTarget(size.width * 0.5 * this._dc, size.height * this._dc);\n\t};\n\n\tRiftRenderPass.prototype.render = function (\n\t\trenderer,\n\t\twriteBuffer,\n\t\treadBuffer,\n\t\tdelta,\n\t\tmaskActive,\n\t\tcamera,\n\t\tlights,\n\t\tclearColor\n\t) {\n\t\tcamera = camera || this.goo.Renderer.mainCamera;\n\t\tif (!camera) { return; }\n\t\tthis.camera.copy(camera);\n\t\tthis.camera.setFrustumPerspective(this.fov, 1);\n\t\tlights = lights || [];\n\t\tvar renderList = this.renderList;\n\t\t\n\t\t// Left eye\n\t\tthis.offsetVector.setVector(this.camera._left).scale(this.eyeOffset);\n\t\tthis.camera.translation.addVector(this.offsetVector);\n\t\tthis.camera.update();\n\t\trenderer.render(renderList, this.camera, lights, this.leftTarget, this.clear);\n\t\t\n\t\t// Right eye\n\t\tthis.offsetVector.scale(2);\n\t\tthis.camera.translation.subVector(this.offsetVector);\n\t\tthis.camera.update();\n\t\trenderer.render(renderList, this.camera, lights, this.rightTarget, this.clear);\n\t\t\n\t\t// Composit\n\t\tthis.material.setTexture('LEFT_TEX', this.leftTarget);\n\t\tthis.material.setTexture('RIGHT_TEX', this.rightTarget);\n\t\tif (this.renderToScreen) {\n\t\t\trenderer.render(this.renderable, this.fullscreenCamera, [], null, this.clear);\n\t\t} else {\n\t\t\trenderer.render(this.renderable, this.fullscreenCamera, [], writeBuffer, this.clear);\n\t\t}\n\t};\n\t\n\tRiftRenderPass.parameters = [{\n\t\tkey: 'eyeDistance',\n\t\ttype: 'float',\n\t\tmin: 0.0,\n\t\tmax: 0.4,\n\t\t'default': 0.1,\n\t\tcontrol: 'slider'\n\t}]\t\n\tvar riftShader = {\n\t\tattributes : {\n\t\t\tvertexPosition : 'POSITION',\n\t\t\tvertexUV0 : 'TEXCOORD0'\n\t\t},\n\t\tuniforms : {\n\t\t\tviewMatrix: 'VIEW_MATRIX',\n\t\t\tprojectionMatrix: 'PROJECTION_MATRIX',\n\t\t\tworldMatrix: 'WORLD_MATRIX',\n\t\t\tleftTex: 'LEFT_TEX',\n\t\t\trightTex: 'RIGHT_TEX',\n\t\t\tlensCenterOffset: [0, 0],\n\t\t\tdistortion: [1, 0.22, 0.24, 0],\n\t\t\taberration: [0.996, -0.004, 1.014, 0],\n\t\t\tscaleIn: [1,1],\n\t\t\tscale: [0.8,0.8]\n\t\t},\n\t\tvshader: [\n\t\t\t'attribute vec3 vertexPosition;',\n\t\t\t'attribute vec2 vertexUV0;',\n\n\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t'uniform mat4 worldMatrix;',\n\n\t\t\t'varying vec2 vUv;',\n\t\t\t'void main() {',\n\t\t\t\t'vUv = vertexUV0;',\n\t\t\t\t'gl_Position = projectionMatrix * viewMatrix * worldMatrix * vec4( vertexPosition, 1.0 );',\n\t\t\t'}'\n\t\t].join('\\n'),\n\t\tfshader: [\n\t\t\t'uniform sampler2D leftTex;',\n\t\t\t'uniform sampler2D rightTex;',\n\n\t\t\t'uniform vec2 scaleIn;',\n\t\t\t'uniform vec2 scale;',\n\t\t\t'uniform vec2 lensCenterOffset;',\n\t\t\t'uniform vec4 distortion;',\n\t\t\t'uniform vec4 aberration;',\n\t\t\t\n\t\t\t'varying vec2 vUv;',\n\n\t\t\t'vec2 distort(vec2 texCoords, vec2 ab) {',\n\t\t\t\t// 'vec2 lensOffset = vUv.x > 0.5 ? lensCenterOffset: -lensCenterOffset;',\n\t\t\t\t'vec2 lensCoords = ((texCoords * 2.0 - 1.0) - lensCenterOffset) * scaleIn;',\n\n\t\t\t\t'float rSq = dot(lensCoords, lensCoords);',\n\t\t\t\t'vec4 r = vec4(1.0, rSq, rSq*rSq, rSq*rSq*rSq);',\n\n\t\t\t\t'vec2 newCoords = lensCoords * dot(ab, r.xy) * dot(distortion, r);',\n\t\t\t\t'return ((newCoords * scale + lensCenterOffset) + 1.0) / 2.0;',\n\t\t\t'}',\n\n\t\t\t'void main() {',\n\t\t\t\t'vec2 coord = vUv;',\n\t\t\t\t'if (vUv.x > 0.5) {', // Right eye\n\t\t\t\t\t'coord.x = 1.0 - coord.x;',\n\t\t\t\t'}',\n\t\t\t\t'coord.x *= 2.0;',\n\n\t\t\t\t'vec2 blue = distort(coord, aberration.zw);',\n\t\t\t\t'if (!all(equal(clamp(blue, vec2(0.0), vec2(1.0)), blue))) {',\n\t\t\t\t\t'discard;',\n\t\t\t\t'}',\n\n\t\t\t\t'vec2 red = distort(coord, aberration.xy);',\n\t\t\t\t'vec2 green = distort(coord, vec2(1.0, 0.0));',\n\t\t\t\t'gl_FragColor.a = 1.0;',\n\t\t\t\t'if (vUv.x > 0.5) {',\n\t\t\t\t\t'red.x = 1.0 - red.x;',\n\t\t\t\t\t'green.x = 1.0 - green.x;',\n\t\t\t\t\t'blue.x = 1.0 - blue.x;',\n\n\t\t\t\t\t'gl_FragColor.r = texture2D(rightTex, red).r;',\n\t\t\t\t\t'gl_FragColor.g = texture2D(rightTex, green).g;',\n\t\t\t\t\t'gl_FragColor.b = texture2D(rightTex, blue).b;',\n\t\t\t\t'} else {',\n\t\t\t\t\t'gl_FragColor.r = texture2D(leftTex, red).r;',\n\t\t\t\t\t'gl_FragColor.g = texture2D(leftTex, green).g;',\n\t\t\t\t\t'gl_FragColor.b = texture2D(leftTex, blue).b;',\n\t\t\t\t'}',\n\t\t\t'}'\n\t\t].join('\\n')\n\t};\n\n\twindow.RiftRenderPass = RiftRenderPass;\n}());\n\n'use strict';\n(function(global) {\n\tvar originalPass = null;\n\tvar originalComposer = null;\n\tvar addedPass = null;\n\t\n\tvar PassSwitcher = {\n\t\tswitchPass: function(pass, ctx, goo) {\n\t\t\taddedPass = pass;\n\t\t\tvar renderSystem = ctx.world.getSystem('RenderSystem');\n\t\t\t// Get or create composer\n\t\t\tvar composer\n\t\t\tif (renderSystem.composers.length) {\n\t\t\t\tcomposer = renderSystem.composers[0];\n\t\t\t\toriginalPass = composer.passes.shift();\n\t\t\t\tpass.renderToScreen = false;\n\t\t\t} else {\n\t\t\t\toriginalComposer = composer = new goo.Composer();\n\t\t\t\trenderSystem.composers.push(composer);\n\t\t\t\tpass.renderToScreen = true;\n\t\t\t}\n\t\t\t// Add the post effect\n\t\t\tcomposer.passes.unshift(pass);\n\t\t\tif (composer.size) {\n\t\t\t\tif (pass.updateSize instanceof Function) {\n\t\t\t\t\tpass.updateSize(composer.size, ctx.world.gooRunner.renderer);\n\t\t\t\t}\n\t\t\t\tpass.viewportSize = composer.size;\n\t\t\t}\n\t\t},\n\t\tswitchBack: function(ctx, goo) {\n\t\t\tvar renderSystem = ctx.world.getSystem('RenderSystem');\n\t\t\tif (originalComposer) {\n\t\t\t\toriginalComposer.destroy(ctx.world.gooRunner.renderer)\n\t\t\t\t// If we created a post effect chain, remove it\n\t\t\t\tgoo.ArrayUtil.remove(renderSystem.composers, originalComposer);\n\t\t\t} else {\n\t\t\t\t// Otherwise, remove the post effect and put back the outpass\n\t\t\t\tvar composer = renderSystem.composers[0];\n\t\t\t\tgoo.ArrayUtil.remove(composer.passes, addedPass);\n\t\t\t\tcomposer.passes.unshift(originalPass);\n\t\t\t}\n\t\t}\n\t};\n\tglobal.PassSwitcher = PassSwitcher;\n}(window));", "name": "VR Render Script", "license": "CC0", "created": "2015-06-25T11:28:03.992781+00:00", "deleted": false, "dataModelVersion": 2, "modified": "2015-06-25T11:28:05.534532+00:00", "dependencies": {}, "id": "b88ee439142b4ba5b918fdc3fd3cc83d.script"}, "df36ea7e12b44804bdeb1fe59c4fcdfb.mesh": {"name": "", "license": "CC0", "created": "2015-06-25T08:56:06.187952+00:00", "boundingVolume": {"max": [0.664116382598877, 0.664116382598877, 0.664116382598877], "type": "BoundingBox", "min": [-0.664116382598877, -0.664116382598877, -0.664116382598877]}, "modified": "2015-06-25T08:56:23.921520+00:00", "dataModelVersion": 2, "deleted": false, "vertexCount": 60, "indexModes": ["Triangles"], "indices": [29520, 60, "uint8"], "attributes": {"POSITION": {"dimensions": 3, "value": [29580, 180, "float32"]}, "TEXCOORD0": {"dimensions": 2, "value": [30300, 120, "float32"]}, "TANGENT": {"dimensions": 4, "value": [30780, 240, "float32"]}, "NORMAL": {"dimensions": 3, "value": [31740, 180, "float32"]}}, "binaryRef": "6c432f13dc5096d51cd526295d3c47b372e4d1c3.bin", "type": "Mesh", "id": "df36ea7e12b44804bdeb1fe59c4fcdfb.mesh", "indexLengths": [60]}, "f262bb7418044b34ae6100230b7988c4.script": {"body": "/**\n * Stream video in Goo Create!\n * 1. Upload a video to Create by dropping the file into the asset bin.\n * 2. Put it in the videoTexture slot in this script.\n * 3. Publish.\n * 4. Copy the URL of the video in the published scene.\n * 5. Paste the URL in the videoUrl parameter input.\n * 6. Set the texture as lazy load.\n * 7. Done!\n */\n\n'use strict';\n\n/* global goo */\n\nvar setup = function (args, ctx) {\n\tvar video = document.createElement('video');\n\tvideo.src = args.videoUrl;\n\tvideo.oncanplay = function(){\n\t\tctx.canPlay = true;\n\t\tctx.video = video;\n\t};\n\t\t\n\tctx.listeners = {\n\t\tmousedown: function(){\n\t\t\tif(ctx.canPlay && !ctx.started){\n\t\t\t\tvideo.play();\n\t\t\t\tvideo.width = video.videoWidth;\n\t\t\t\tvideo.height = video.videoHeight;\n\t\t\t\tvideo.loop = true;\n\t\t\t\tvar texture = new goo.Texture();\n\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\ttexture.minFilter = 'BilinearNoMipMaps';\n\t\t\t\ttexture.setImage(video);\n\t\t\t\tctx.entity.meshRendererComponent.materials[0].uniforms.materialDiffuse = [1,1,0,1];\n\t\t\t\tctx.entity.meshRendererComponent.materials[0].setTexture('DIFFUSE_MAP', texture);\n\t\t\t\ttexture.updateCallback = function () {\n\t\t\t\t\treturn !video.paused;\n\t\t\t\t};\n\t\t\t\tctx.texture = texture;\n\t\t\t\tctx.started = true;\n\t\t\t\tvideo.dataReady = true;\n\t\t\t}\n\t\t}\n\t};\n\tctx.listeners.touchend = ctx.listeners.mousedown;\n\tfor(var key in ctx.listeners){\n\t\tctx.domElement.addEventListener(key, ctx.listeners[key]);\n\t}\n};\n\nvar cleanup = function (args, ctx) {\t\n\tfor(var key in ctx.listeners){\n\t\tctx.domElement.removeEventListener(key, ctx.listeners[key]);\n\t}\n};\n\nvar parameters = [{\n\tkey: 'videoUrl',\n\ttype: 'string',\n\t'default': ''\n},{\n\tkey: 'videoTexture',\n\ttype: 'texture'\n}];", "name": "Stream video script", "license": "CC0", "created": "2016-02-26T10:46:44.368Z", "deleted": false, "dataModelVersion": 2, "modified": "2016-02-26T10:46:44.368Z", "id": "f262bb7418044b34ae6100230b7988c4.script"}, "ec96f3bd35e943f4ab47b1c598579f78.mesh": {"name": "", "license": "CC0", "created": "2015-06-25T08:56:06.068171+00:00", "boundingVolume": {"max": [0.664116382598877, 0.664116382598877, 0.664116382598877], "type": "BoundingBox", "min": [-0.664116382598877, -0.664116382598877, -0.664116382598877]}, "modified": "2015-06-25T08:56:23.755219+00:00", "dataModelVersion": 2, "deleted": false, "vertexCount": 576, "indexModes": ["Triangles"], "indices": [0, 936, "uint16"], "attributes": {"POSITION": {"dimensions": 3, "value": [1872, 1728, "float32"]}, "TEXCOORD0": {"dimensions": 2, "value": [8784, 1152, "float32"]}, "TANGENT": {"dimensions": 4, "value": [13392, 2304, "float32"]}, "NORMAL": {"dimensions": 3, "value": [22608, 1728, "float32"]}}, "binaryRef": "6c432f13dc5096d51cd526295d3c47b372e4d1c3.bin", "type": "Mesh", "id": "ec96f3bd35e943f4ab47b1c598579f78.mesh", "indexLengths": [936]}, "5de059f428574f899590bffcf9725071.entity": {"name": "Default Lights", "license": "CC0", "tags": {}, "deleted": false, "created": "2015-07-27T15:45:29.194Z", "dataModelVersion": 2, "modified": "2015-07-27T15:45:29.194Z", "static": false, "components": {"transform": {"translation": [0, 0, 0], "scale": [1, 1, 1], "rotation": [0, 0, 0], "children": {"c74e3e7e0a354362bb528f8a38d3dbff.entity": {"entityRef": "c74e3e7e0a354362bb528f8a38d3dbff.entity", "sortValue": 1}, "843d5c34d3e6452fa3b44517b4b1488e.entity": {"entityRef": "843d5c34d3e6452fa3b44517b4b1488e.entity", "sortValue": 0}}}}, "hidden": false, "id": "5de059f428574f899590bffcf9725071.entity"}, "f758d1b3cb4f4a43b36de389c39550d0.script": {"body": "var setup = function(args, ctx, goo) {\n\tctx.touch = function() {\n\t\tif (!document.fullscreenElement) {\n\t\t\tdocument.documentElement.requestFullScreen();\n\t\t}\n\t};\n\tctx.domElement.addEventListener('touchstart', ctx.touch);\n};\nvar cleanup = function(args, ctx, goo) {\n\tctx.domElement.removeEventListener('touchstart', ctx.touch);\n};\n\n", "name": "Full screen", "license": "CC0", "created": "2015-06-25T11:28:03.738412+00:00", "deleted": false, "dataModelVersion": 2, "modified": "2015-06-25T11:28:05.451665+00:00", "dependencies": {}, "id": "f758d1b3cb4f4a43b36de389c39550d0.script"}, "1357bc80a1434a92bd41040591f474f2.entity": {"name": "Box", "license": "CC0", "tags": {}, "deleted": false, "created": "2016-02-22T14:26:02.843Z", "dataModelVersion": 2, "modified": "2016-02-22T14:26:02.843Z", "static": false, "components": {"meshData": {"shape": "Box", "shapeOptions": {"textureMode": "Unfolded"}}, "transform": {"rotation": [0, 0, 0], "scale": [1, 1, 1], "translation": [0, 0, 0]}, "meshRenderer": {"receiveShadows": true, "materials": {"92aca09436674360863731d38f23827a.material": {"materialRef": "92aca09436674360863731d38f23827a.material", "sortValue": 0}}, "reflectable": true, "cullMode": "Dynamic", "castShadows": true}, "script": {"scripts": {"a64bbd1698ba4d06b7802fa26f9febca.scriptinstance": {"id": "a64bbd1698ba4d06b7802fa26f9febca.scriptinstance", "name": "Instance of video_loader", "scriptRef": "107c4dcd5e1c48e1989dd9086aafed2a.script", "sortValue": 0, "options": {"texture2": {"enabled": true}, "texture1": {"enabled": true}, "enabled": false, "listenToStop": "stop", "listenToStart": "start"}}}}}, "hidden": true, "id": "1357bc80a1434a92bd41040591f474f2.entity"}, "218277c4b512410483a715adef343104.material": {"flat": false, "cullState": {"frontFace": "CCW", "enabled": true, "cullFace": "Back"}, "uniforms": {"opacity": {"enabled": false, "value": 1}, "refractivity": {"enabled": false, "value": 0}, "materialAmbient": {"enabled": true, "value": [0.6588235294117647, 0.6588235294117647, 0.6588235294117647, 1]}, "materialSpecular": {"enabled": true, "value": [0, 0, 0, 1]}, "fresnel": {"enabled": true, "value": 0.5}, "reflectivity": {"enabled": true, "value": 0.5}, "materialSpecularPower": {"enabled": true, "value": 1}, "materialDiffuse": {"enabled": true, "value": [0.6588235294117647, 0.6588235294117647, 0.6588235294117647, 1]}, "vertexColorAmount": {"enabled": true, "value": 1}, "materialEmissive": {"enabled": true, "value": [0, 0, 0, 1]}, "discardThreshold": {"enabled": true, "value": 0.1}, "normalMultiplier": {"enabled": true, "value": 1}, "etaRatio": {"enabled": true, "value": -0.5}, "reflectionType": 1, "wrapSettings": {"enabled": true, "value": [0, 0]}}, "name": "IcosahedronMat", "license": "CC0", "created": "2015-06-25T08:56:07.659628+00:00", "deleted": false, "id": "218277c4b512410483a715adef343104.material", "wireframe": false, "dataModelVersion": 2, "blendState": {"blendDst": "OneMinusSrcAlphaFactor", "blendSrc": "SrcAlphaFactor", "blendEquation": "AddEquation", "blending": "NoBlending"}, "modified": "2015-06-25T08:56:25.788853+00:00", "dualTransparency": false, "depthState": {"write": true, "enabled": true}, "shaderRef": "GOO_ENGINE_SHADERS/uber", "texturesMapping": {"AO_MAP": {"enabled": true, "textureRef": "5b4dfffaae2a464987abe43bcffdb85a.texture"}}, "renderQueue": -1}, "d3d8a74a4a18453bb8bb9e0b92ec6d36.entity": {"name": "Icosahedron", "license": "CC0", "created": "2016-02-24T09:25:50.997Z", "deleted": false, "tags": {}, "dataModelVersion": 2, "modified": "2016-02-24T09:25:50.997Z", "static": false, "components": {"transform": {"rotation": [0, 0, 0], "scale": [1, 1, 1], "translation": [0, 0.04008805379271507, -5.007187843322754], "children": {"fd90172063be40a2a5f15d903283c2de.entity": {"entityRef": "fd90172063be40a2a5f15d903283c2de.entity", "sortValue": 3}, "7be723f5741346ecb4a0c84a165b612d.entity": {"entityRef": "7be723f5741346ecb4a0c84a165b612d.entity", "sortValue": 4}}}}, "hidden": false, "id": "d3d8a74a4a18453bb8bb9e0b92ec6d36.entity"}, "4cfc09f9b76a4f4cad4a6032cdf0744a.material": {"texturesMapping": {}, "flat": false, "cullState": {"frontFace": "CCW", "enabled": true, "cullFace": "Back"}, "uniforms": {"opacity": {"enabled": false, "value": 1}, "refractivity": {"enabled": false, "value": 0}, "materialAmbient": {"enabled": true, "value": [0.1, 0.1, 0.1, 1]}, "materialSpecular": {"enabled": true, "value": [0.6, 0.6, 0.6, 1]}, "fresnel": {"enabled": true, "value": 0.5}, "vertexColorAmount": {"enabled": true, "value": 1}, "materialSpecularPower": {"enabled": true, "value": 64}, "materialDiffuse": {"enabled": true, "value": [0.8, 0.8, 0.8, 1]}, "reflectivity": {"enabled": true, "value": 0.6}, "materialEmissive": {"enabled": true, "value": [0, 0, 0, 1]}, "discardThreshold": {"enabled": true, "value": 0.1}, "normalMultiplier": {"enabled": true, "value": 1}, "etaRatio": {"enabled": true, "value": -0.5}, "reflectionType": 0, "wrapSettings": {"enabled": true, "value": [0, 0]}}, "name": "Default Material 3", "license": "CC0", "created": "2016-02-26T15:46:13.823Z", "deleted": false, "wireframe": false, "dataModelVersion": 2, "blendState": {"blendEquation": "AddEquation", "blendSrc": "SrcAlphaFactor", "blendDst": "OneMinusSrcAlphaFactor", "blending": "NoBlending"}, "modified": "2016-02-26T15:46:13.823Z", "dualTransparency": false, "depthState": {"write": true, "enabled": true}, "shaderRef": "GOO_ENGINE_SHADERS/uber", "id": "4cfc09f9b76a4f4cad4a6032cdf0744a.material", "renderQueue": -1}, "3796306a58c24ed9936146e0002a720a.script": {"body": "var setup = function(args, ctx, goo) {\n\tctx.lastEvent = null\n\tctx.lastOrientation = null;\n\tctx.orientation = new goo.Matrix3x3();\n\tctx.rotation = new goo.Matrix3x3();\n\tctx.firstRotation = null;\n\n\tctx.currentQuat = new goo.Quaternion();\n\tctx.targetQuat = new goo.Quaternion();\n\n\tctx.deviceOrientation = function(evt) {\n\t\tif (evt.alpha && evt.beta && evt.gamma) {\n\t\t\tctx.lastEvent = evt;\n\t\t}\n\t};\n\tctx.reset = function() {\n\t\tctx.firstRotation = null;\n\t};\n\tgoo.SystemBus.addListener('gyro.reset', ctx.reset);\n\twindow.addEventListener('deviceorientation', ctx.deviceOrientation);\n};\n\nvar cleanup = function(args, ctx, goo) {\n\twindow.removeEventListener('deviceorientation', ctx.deviceOrientation);\n\tgoo.SystemBus.removeListener('gyro.reset', ctx.reset);\n};\nvar update = function(args, ctx, goo) {\n\tif (ctx.lastEvent) {\n\t\t// Grab the orientation\n\t\tyxz(\n\t\t\tctx.rotation,\n\t\t\tctx.lastEvent.beta * goo.MathUtils.DEG_TO_RAD,\n\t\t\tctx.lastEvent.alpha * goo.MathUtils.DEG_TO_RAD,\n\t\t\t- ctx.lastEvent.gamma * goo.MathUtils.DEG_TO_RAD\n\t\t);\n\t\t// Adapt to screen.\n\t\t// We want the entity so that a camera would point towards -Z with Y up\n\t\tif (window.orientation !== undefined) {\n\t\t\tif (ctx.lastOrientation !== window.orientation) {\n\t\t\t\tctx.orientation.fromAngles(\n\t\t\t\t\t- Math.PI / 2,\n\t\t\t\t\t- window.orientation * goo.MathUtils.DEG_TO_RAD,\n\t\t\t\t\t0\n\t\t\t\t);\n\t\t\t\tctx.lastOrientation = window.orientation;\n\t\t\t}\n\t\t} else if (window.innerWidth > window.innerHeight) {\n\t\t\tif (ctx.lastOrientation !== 'landscape') {\n\t\t\t\tctx.orientation.fromAngles(\n\t\t\t\t\t- Math.PI / 2,\n\t\t\t\t\t- Math.PI / 2,\n\t\t\t\t\t0\n\t\t\t\t);\n\t\t\t\tctx.lastOrientation = 'landscape';\n\t\t\t}\n\t\t} else {\n\t\t\tif (ctx.lastOrientation !== 'portrait') {\n\t\t\t\tctx.orientation.fromAngles(\n\t\t\t\t\t- Math.PI / 2,\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t);\n\t\t\t\tctx.lastOrientation = 'portrait';\n\t\t\t}\n\t\t}\n\t\tctx.rotation.combine(ctx.orientation);\n\t\tif (!args.absolute) {\n\t\t\tif (!ctx.firstRotation) {\n\t\t\t\tctx.firstRotation = new goo.Matrix3x3();\n\t\t\t\tctx.firstRotation.copy(ctx.rotation).invert();\n\t\t\t}\n\t\t\tgoo.Matrix3x3.combine(ctx.firstRotation, ctx.rotation, ctx.rotation);\n\t\t}\n\t\tif (args.lerp === 1) {\n\t\t\tctx.entity.transformComponent.transform.rotation.copy(ctx.rotation);\n\t\t} else {\n\t\t\tctx.currentQuat.fromRotationMatrix(ctx.entity.transformComponent.transform.rotation);\n\t\t\tctx.targetQuat.fromRotationMatrix(ctx.rotation);\n\t\t\t\n\t\t\tctx.currentQuat.slerp(ctx.targetQuat, args.lerp);\n\t\t\tctx.currentQuat.toRotationMatrix(ctx.entity.transformComponent.transform.rotation);\n\t\t}\n\t\tctx.entity.transformComponent.setUpdated();\n\t\tctx.lastEvent = null;\n\t}\n};\n\nvar parameters = [{\n\tkey: 'absolute',\n\ttype: 'boolean',\n\tdefault: false\n}, {\n\tkey: 'lerp',\n\ttype: 'float',\n\tmin: 0,\n\tmax: 1,\n\tdefault: 0.9,\n\tcontrol: 'slider'\n}];\n\nfunction yxz(matrix, x, y, z) {\n\tvar d = matrix.data;\n\n\tvar cy = Math.cos(x);\n\tvar sy = Math.sin(x);\n\tvar ch = Math.cos(y);\n\tvar sh = Math.sin(y);\n\tvar cp = Math.cos(z);\n\tvar sp = Math.sin(z);\n\n\td[0] = ch * cp + sh * sp * sy;\n\td[3] = sh * cp * sy - ch * sp;\n\td[6] = cy * sh;\n\n\td[1] = cy * sp;\n\td[4] = cy * cp;\n\td[7] = - sy;\n\n\td[2] = ch * sp * sy - sh * cp;\n\td[5] = sh * sp + ch * cp * sy;\n\td[8] = cy * ch;\n}\n", "name": "Device Orientation script", "license": "CC0", "created": "2015-06-25T11:28:03.932752+00:00", "deleted": false, "dataModelVersion": 2, "modified": "2015-06-25T11:28:05.517005+00:00", "dependencies": {}, "id": "3796306a58c24ed9936146e0002a720a.script"}}